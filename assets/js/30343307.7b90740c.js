"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8618],{5549:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var r=t(512),i=t(4848),s=t(8453);const a={title:"Dynamically scaling your Skip services",description:"How to horizontally scale Skip services with Kubernetes",slug:"horizontal-scaling",date:new Date("2025-06-06T00:00:00.000Z"),authors:"benno"},o=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Leader/Follower architecture",id:"leaderfollower-architecture",level:2},{value:"Kubernetes",id:"kubernetes",level:2},{value:"Wrap-up",id:"wrap-up",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Skip makes it fast and easy to build reactive services which efficiently update\ntheir outputs in response to input changes, powering real-time features and\nsaving resources by avoiding unnecessary recomputations."}),"\n",(0,i.jsx)(n.p,{children:"The technical foundation that makes this possible is Skip's hyper-efficient\nreactive computation graph, which is written in the Skip programming language,\nruns natively, and takes great pains to efficiently represent and manipulate\nthe data underlying your reactive system."}),"\n",(0,i.jsx)(n.p,{children:"However, that still requires memory, compute, and other resources -- so what do\nyou do when traffic spikes or grows beyond the capacity of even a powerful\nsingle machine? Scale out and distribute your reactive service across more\nmachines, of course!"}),"\n",(0,i.jsx)(n.p,{children:"We've recently built out some capabilities to make this easy, using a\ndistributed leader/follower architecture to dramatically increase the number of\nconcurrent resource instances that a Skip service can support."}),"\n",(0,i.jsx)(n.h2,{id:"leaderfollower-architecture",children:"Leader/Follower architecture"}),"\n",(0,i.jsx)(n.p,{children:"A single Skip service consists of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["a ",(0,i.jsx)(n.strong,{children:"shared computation graph"})," representing the portion of that service's\ncomputations that is common among all of its clients: some data structures,\naggregations, partially-computed results, or the like that are always\nmaintained up-to-date regardless of client requests, and"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["one or more ",(0,i.jsx)(n.strong,{children:"resources"})," which can be instantiated by clients, dynamically\nextending the computation graph as needed to produce data streams customized\nby user-specific context or request parameters."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In practice, the work of maintaining the shared computation graph should not\nmassively increase under spiking load, but the work of maintaining resource\ninstances and serving their data streams ",(0,i.jsx)(n.em,{children:"will"})," increase in proportion to the\nnumber of concurrent clients."]}),"\n",(0,i.jsxs)(n.p,{children:["This dynamic affords an opportunity for ",(0,i.jsx)(n.strong,{children:"horizontal scaling"}),": we can maintain the\nshared computation graph just once on a\n",(0,i.jsx)(n.a,{href:"https://skiplabs.io/docs/api/helpers/functions/asLeader",children:(0,i.jsx)(n.em,{children:"leader"})})," and mirror\nit to each of any number of\n",(0,i.jsx)(n.a,{href:"https://skiplabs.io/docs/api/helpers/functions/asFollower",children:(0,i.jsx)(n.em,{children:"followers"})}),",\namong which resource instances are evenly distributed, as illustrated in the\nfollowing diagram:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Leader-follower architecture",src:t(1717).A+"",width:"1218",height:"1025"})}),"\n",(0,i.jsx)(n.p,{children:"This diagram shows the structure of a distributed Skip service and the data flow\nfor a single client request. When client A requests a live data stream, a\nreverse proxy forwards that to an available follower, selecting follower 2 in\nthis example. That follower then sets up a reactive compute graph to maintain\nthe requested data, incorporating user context and query parameters from client\nA as well as any shared inputs from the leader."}),"\n",(0,i.jsx)(n.p,{children:"This design allows to instantiate many more resources for many more clients than\na single Skip service could handle alone, while maintaining the clean/simple\nsemantics and low latency of a single-service deployment."}),"\n",(0,i.jsxs)(n.p,{children:["To see this in action, you can pull our example, run it locally, and navigate to\n",(0,i.jsx)(n.code,{children:"localhost"})," in your browser:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx create-skip-service hackernews --example hackernews --verbose\ndocker compose -f hackernews/compose.distributed.yml up --build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To see more options or run the application in alternative configurations,\nconsult the ",(0,i.jsx)(n.code,{children:"README.md"}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/tree/main/examples/hackernews/README.md",children:"online"}),"\nor in the ",(0,i.jsx)(n.code,{children:"hackernews"})," directory created by ",(0,i.jsx)(n.code,{children:"create-skip-service"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"kubernetes",children:"Kubernetes"}),"\n",(0,i.jsx)(n.p,{children:"Running a distributed reactive service is a great way to handle larger amounts\nof traffic and/or more complex reactive computations, but what's really\nimportant is to be able to easily scale your reactive system up and down when\nyour product goes viral, traffic spikes, and your pager goes off in the middle\nof the night."}),"\n",(0,i.jsxs)(n.p,{children:["We've recently built out some Kubernetes\n",(0,i.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/tree/main/examples/hackernews/kubernetes/distributed_skip",children:"configuration"}),"\nto make this as easy as running ",(0,i.jsx)(n.code,{children:"kubectl scale --replicas=$X ..."})," (or the\nGUI/dashboard equivalent if you prefer or are running on a hosted platform)\nwithout breaking any clients or requiring any changes in your reactive service\nor other backend components."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Try it yourself! Run the hackernews example linked above using its Kubernetes\nconfiguration, then try running ",(0,i.jsx)(n.code,{children:"kubectl scale --replicas=$REPLICAS statefulset rhn-skip"})," with varying number of ",(0,i.jsx)(n.code,{children:"REPLICAS"})," (at least 2, for one leader and one\nfollower) and see your Skip service scale up and down without downtime."]})}),"\n",(0,i.jsxs)(n.p,{children:["The core idea is simple: your reactive Skip service is a Kubernetes\n",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/",children:"StatefulSet"}),",\ngiving each pod a stable and unique network identity.  When a new pod is added\n(either at startup or when scaling up), it registers itself with the cluster's\ningress load balancer."]}),"\n",(0,i.jsx)(n.p,{children:"When a resource is instantiated, the resulting data stream's identifier encodes\nthe follower hosting the stream, allowing the load balancer to route external\ntraffic to the proper Skip instance.  When traffic subsides and the deployment\nscales down, the pod is taken out of rotation by the load balancer, until a\nsubsequent scale-up brings it back into use."}),"\n",(0,i.jsx)(n.h2,{id:"wrap-up",children:"Wrap-up"}),"\n",(0,i.jsx)(n.p,{children:"Everyone's infrastructure and application are different, so let us know if there\nare other frameworks or tools you'd like to see supported or used in our\nexamples and demos!"}),"\n",(0,i.jsxs)(n.p,{children:["We're also happy to help you scale out your reactive service using Skip, either\nby adapting these tools to your environment or advising on your setup.  Reach\nout and show us what you're building, or come join the\n",(0,i.jsx)(n.a,{href:"https://discord.gg/rby6YUqGxQ",children:"Discord"}),"!"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1717:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/leader_follower_arch-381167f19ded784eba293fa2178c43ce.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},512:e=>{e.exports=JSON.parse('{"permalink":"/blog/horizontal-scaling","source":"@site/blog/scaling.md","title":"Dynamically scaling your Skip services","description":"How to horizontally scale Skip services with Kubernetes","date":"2025-06-06T00:00:00.000Z","tags":[],"readingTime":3.94,"hasTruncateMarker":true,"authors":[{"name":"Benno Stein","title":"Senior Engineer","url":"https://bennostein.org","key":"benno","page":null}],"frontMatter":{"title":"Dynamically scaling your Skip services","description":"How to horizontally scale Skip services with Kubernetes","slug":"horizontal-scaling","date":"2025-06-06T00:00:00.000Z","authors":"benno"},"unlisted":false,"nextItem":{"title":"React + Vite in front of a Skip Service - the template","permalink":"/blog/skip_with_react_vite"}}')}}]);