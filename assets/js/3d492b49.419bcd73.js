"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6870],{5775:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var n=t(2586),i=t(4848),r=t(8453);const a={title:"Building a Real-time Blog with Skip and PostgreSQL",description:"How to use Skip's reactive data streaming with a PostgreSQL backend",slug:"postgresql_and_skip",date:new Date("2025-05-16T00:00:00.000Z"),authors:"hubyrod",image:"/img/skip.png"},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"What you need:",id:"what-you-need",level:2},{value:"What you will learn:",id:"what-you-will-learn",level:2},{value:"Okay..ready?\u2026.let&#39;s go!",id:"okayreadylets-go",level:2},{value:"The Skip Service",id:"the-skip-service",level:2},{value:"Terminal 1: Start the Server",id:"terminal-1-start-the-server",level:3},{value:"Terminal 2: Subscribe to Post Updates",id:"terminal-2-subscribe-to-post-updates",level:3},{value:"Terminal 3: Modify the Post",id:"terminal-3-modify-the-post",level:3},{value:"Wrap-up",id:"wrap-up",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function h(e){const s={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["Hello Skippers. Today, we are going to plug a ",(0,i.jsx)(s.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"})," service and our starting point is the following project on GitHub: ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc",children:"Skip Postgres Demo"}),". We will demonstrate how to use Skip's reactive data streaming with a PostgreSQL backend. This project implements a simple blog post system with real-time updates using Skip's streaming capabilities."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"PostgreSQL and Skip Service",src:t(395).A+"",width:"1270",height:"361"})}),"\n","\n",(0,i.jsx)(s.p,{children:"Before we get too far ahead, two things\u2026(1) what you need and (2) what you will learn:"}),"\n",(0,i.jsx)(s.h2,{id:"what-you-need",children:"What you need:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://nodejs.org/en",children:"Node.js"})," (Latest LTS version recommended)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://pnpm.io/",children:(0,i.jsx)(s.code,{children:"pnpm"})})," package manager"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://www.docker.com/",children:"Docker"})," (for PostgreSQL)"]}),"\n",(0,i.jsxs)(s.li,{children:["(optional) a Json pretty printer in the terminal, I use ",(0,i.jsx)(s.a,{href:"https://jqlang.org/",children:"jq"})]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"what-you-will-learn",children:"What you will learn:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Real-time post streaming using Skip's reactive data system"}),"\n",(0,i.jsx)(s.li,{children:"PostgreSQL integration for data persistence"}),"\n",(0,i.jsx)(s.li,{children:"RESTful API endpoints for post management"}),"\n",(0,i.jsx)(s.li,{children:"Support for streaming data access"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"okayreadylets-go",children:"Okay..ready?\u2026.let's go!"}),"\n",(0,i.jsx)(s.p,{children:"We are starting from a REST server for the simplest blog post system and we are going to add real-time updates features to it.\nLet's check out the project:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"git clone https://github.com/SkipLabs/postgres_and_skip_poc.git\ncd postgres_and_skip_poc/\ngit checkout $(git rev-list --max-parents=0 main)\n"})}),"\n",(0,i.jsx)(s.p,{children:"And yes, you are right we are not starting on top of the main branch, but don't worry we'll get there in no time."}),"\n",(0,i.jsxs)(s.p,{children:["Run the ",(0,i.jsx)(s.code,{children:"init_and_start_server.sh"})," script, it will start a PostgreSQL database in a Docker container and fill it in with some data. It will then install and build the whole project with ",(0,i.jsx)(s.code,{children:"pnpm"})," to finally start it!"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"./init_and_start_server.sh\n"})}),"\n",(0,i.jsx)(s.p,{children:"The last lines should look something like:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"\ud83d\ude80 Starting server...\n\n\n> skip-postgres@1.0.0 start /your/path/skip-postgres\n> node dist/index.js\n\nServer running at http://localhost:3000\n\n"})}),"\n",(0,i.jsx)(s.p,{children:"In a new terminal, we are going to check that the REST API is up:\nFirst, let's display one of the articles:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"curl localhost:3000/posts/7 | jq\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Note that here there's an easy shortcut - I use ",(0,i.jsx)(s.a,{href:"https://jqlang.org/",children:(0,i.jsx)(s.code,{children:"jq"})}),", which will make life more convenient to read JSON output."]}),"\n",(0,i.jsx)(s.p,{children:"As you can see, the article is not published:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'  "published_at": null,\n  "created_at": "<some_date>",\n  "updated_at": "<some_date>"\n'})}),"\n",(0,i.jsx)(s.p,{children:"We are going to publish and unpublish it:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"curl -X PATCH http://localhost:3000/posts/7/publish | jq\ncurl -X PATCH http://localhost:3000/posts/7/unpublish | jq\n"})}),"\n",(0,i.jsx)(s.p,{children:"You should see the modification as results of the calls."}),"\n",(0,i.jsx)(s.p,{children:"A working REST API."}),"\n",(0,i.jsx)(s.p,{children:"And now here comes the fun part, let's make it a reactive API"}),"\n",(0,i.jsx)(s.h2,{id:"the-skip-service",children:"The Skip Service"}),"\n",(0,i.jsx)(s.p,{children:"First of all, kill your running server.\nWe are about to checkout the top of the main branch and install the necessary bits:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"git checkout main\npnpm add -D @skipruntime/core @skipruntime/helpers @skipruntime/server\npnpm add @skip-adapter/postgres\n"})}),"\n",(0,i.jsx)(s.p,{children:"A Skip service has collections as inputs and mappers to transform them into resources as outputs."}),"\n",(0,i.jsxs)(s.p,{children:["In our case, in file ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts",children:(0,i.jsx)(s.code,{children:"skipservice.ts"})})," you will find:"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["A type you want to be notified about: ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L16-L29",children:(0,i.jsx)(s.code,{children:"PostWithAuthor"})})," which contains information from two tables: Users and Posts (see ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/db/schema.sql",children:(0,i.jsx)(s.code,{children:"schema.sql"})}),")."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["A mapper ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L32-L65",children:(0,i.jsx)(s.code,{children:"PostMapper"})})," which creates instances of this type from an ",(0,i.jsx)(s.code,{children:"EagerCollection"})," (an ",(0,i.jsx)(s.code,{children:"EagerCollection"})," is always kept up-to-date)."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["A resource ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L73-L85",children:(0,i.jsx)(s.code,{children:"PostResource"})})," which implements a function from a ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L67-L69",children:(0,i.jsx)(s.code,{children:"PostsResourceInputs"})})," to an ",(0,i.jsx)(s.code,{children:"EagerCollection<number, PostWithAuthor>"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["And it is when we instantiate our service that we plug it to the PostgreSQL, when we define an instance of ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc/blob/main/src/skipservice.mts#L10-L19",children:(0,i.jsx)(s.code,{children:"SkipService"})}),", we receive a context as input. This context provides a method ",(0,i.jsx)(s.code,{children:"useExternalResource"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Remember that in Skip, Resources are the outputs of your service that clients can subscribe to, while Collections are the inputs that feed data into your service. When you create a graph using ",(0,i.jsx)(s.code,{children:"createGraph"}),", you define how these Collections are transformed into Resources. Once you've set up your graph and connected it to your external services (like PostgreSQL in our case), you just need a few lines of code in your server to expose these Resources to clients:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"app.get(\n '/streams/posts/:uid',\n asyncHandler(async (req, res) => {\n   const uid = Number(req.params.uid);\n   const uuid = await serviceBroker.getStreamUUID('posts', uid);\n   res.redirect(301, `${SKIP_READ_URL}/v1/streams/${uuid}`);\n })\n);\n\n\napp.get(\n '/streams/posts',\n asyncHandler(async (req, res) => {\n   const uuid = await serviceBroker.getStreamUUID('posts');\n   res.redirect(301, `${SKIP_READ_URL}/v1/streams/${uuid}`);\n })\n);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["You can find these lines in ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/index.ts#L65-L80",children:(0,i.jsx)(s.code,{children:"src/index.ts#L65-L80"})})]}),"\n",(0,i.jsx)(s.p,{children:"We are adding two endpoints:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"/streams/posts/:uid"})," which is a stream of changes for a given post of id uid"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"/streams/posts"})," which is a stream of changes for the entire posts table"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Let's play with it, in three terminals:"}),"\n",(0,i.jsx)(s.h3,{id:"terminal-1-start-the-server",children:"Terminal 1: Start the Server"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"./init_and_start_server.sh\n"})}),"\n",(0,i.jsx)(s.p,{children:"Server and services are ready when you see:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"Skip control service listening on port 8081\nSkip streaming service listening on port 8080\nServer running at http://localhost:3000\n"})}),"\n",(0,i.jsx)(s.h3,{id:"terminal-2-subscribe-to-post-updates",children:"Terminal 2: Subscribe to Post Updates"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"curl -LN http://localhost:3000/streams/posts/7 | \\\n  while read -r line; do\n    echo \"$line\" | grep '^data:' | sed 's/^data: //' | jq .\n  done\n"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["\ud83d\udca1 ",(0,i.jsx)(s.strong,{children:"Note"}),": The shell command above includes some formatting magic to make the output readable. It filters for data lines and pretty-prints the JSON using ",(0,i.jsx)(s.code,{children:"jq"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"terminal-3-modify-the-post",children:"Terminal 3: Modify the Post"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"curl -X PATCH http://localhost:3000/posts/7/publish | jq\ncurl -X PATCH http://localhost:3000/posts/7/unpublish | jq\n"})}),"\n",(0,i.jsx)(s.p,{children:"Watch Terminal 2 while you run these commands in Terminal 3 - you'll see the real-time updates!"}),"\n",(0,i.jsx)(s.h2,{id:"wrap-up",children:"Wrap-up"}),"\n",(0,i.jsxs)(s.p,{children:["In our ",(0,i.jsx)(s.a,{href:"https://skiplabs.io/blog/reactive_social_network_service_poc",children:"previous blog post"}),", we have walked you through how to create a Skip service for a reactive social network, with code! Check it out here: ",(0,i.jsx)(s.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc",children:"Reactive Social Network Service (Proof of Concept)"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Now we have learned how to plug a PostgreSQL service using Skip!"}),"\n",(0,i.jsx)(s.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,i.jsx)(s.p,{children:"For the next Skip article, what should I tackle first? You tell me!"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Scaling your Skip service horizontally?"}),"\n",(0,i.jsx)(s.li,{children:"Integrating with frontend frameworks like React?"}),"\n",(0,i.jsx)(s.li,{children:"Managing authorization and privacy per user?"}),"\n",(0,i.jsx)(s.li,{children:"What else would be most useful to you NOW?"}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},395:(e,s,t)=>{t.d(s,{A:()=>n});const n=t.p+"assets/images/postgres_and_skip-1ba0e6630b14176bfc008a3280a6b234.png"},8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var n=t(6540);const i={},r=n.createContext(i);function a(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:s},e.children)}},2586:e=>{e.exports=JSON.parse('{"permalink":"/blog/postgresql_and_skip","source":"@site/blog/postgresql_and_skip_poc.md","title":"Building a Real-time Blog with Skip and PostgreSQL","description":"How to use Skip\'s reactive data streaming with a PostgreSQL backend","date":"2025-05-16T00:00:00.000Z","tags":[],"readingTime":4.66,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Building a Real-time Blog with Skip and PostgreSQL","description":"How to use Skip\'s reactive data streaming with a PostgreSQL backend","slug":"postgresql_and_skip","date":"2025-05-16T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"A CLI to streamline the creation of Skip services","permalink":"/blog/announcing_create_skip_service_cli"},"nextItem":{"title":"Reactive Social Network Service with Skip","permalink":"/blog/reactive_social_network_service_poc"}}')}}]);