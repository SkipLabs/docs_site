"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6956],{8498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"client","title":"Client connections","description":"Clients can subscribe to updates from a reactive service using the widely-available server-sent events protocol, or make synchronous read requests for specific data.","source":"@site/docs/client.md","sourceDirName":".","slug":"/client","permalink":"/docs/client","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"External data sources","permalink":"/docs/externals"},"next":{"title":"Skip fundamentals","permalink":"/docs/fundamentals"}}');var r=n(4848),i=n(8453);const a={},c="Client connections",o={},d=[{value:"Event Streams",id:"event-streams",level:2},{value:"React clients",id:"react-clients",level:3},{value:"Synchronous HTTP interface",id:"synchronous-http-interface",level:2},{value:"Example web service configuration",id:"example-web-service-configuration",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"client-connections",children:"Client connections"})}),"\n",(0,r.jsxs)(t.p,{children:["Clients can subscribe to updates from a reactive service using the widely-available ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",children:"server-sent events"})," protocol, or make synchronous read requests for specific data.\nThis means that Skip clients are thin and lightweight: the JavaScript ",(0,r.jsx)(t.code,{children:"EventSource"})," interface is widely implemented, and other types of clients can easily implement parsers for the simple text-based protocol."]}),"\n",(0,r.jsxs)(t.p,{children:["Note that this page describes mechanisms for front-end clients or non-Skip systems to access the outputs of a Skip service; to communicate among Skip services it is both simpler and more efficient to use ",(0,r.jsx)(t.a,{href:"/docs/externals",children:"external dependencies"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["By design, client code does not need to import or reason about the internal details of Skip reactive services; this page abstracts over those details, but for completeness's sake we provide a simple explanatory example ",(0,r.jsx)(t.a,{href:"/docs/client#example-web-service-configuration",children:"below"})," of a backend service which can support such clients."]}),"\n",(0,r.jsx)(t.h2,{id:"event-streams",children:"Event Streams"}),"\n",(0,r.jsx)(t.p,{children:"Clients of reactive services can opt to receive pushed data updates using HTTP server-sent events."}),"\n",(0,r.jsxs)(t.p,{children:["The simplest way to see the data that your client will receive is to use ",(0,r.jsx)(t.code,{children:"curl"}),", e.g. ",(0,r.jsx)(t.code,{children:"curl -LN http://reactive.service.hostname/my_resource/foo"})," to stream from ",(0,r.jsx)(t.code,{children:"my_resource"})," with parameter ",(0,r.jsx)(t.code,{children:"foo"}),", which will produce output like the following for the example service ",(0,r.jsx)(t.a,{href:"/docs/client#example-web-service-configuration",children:"below"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'event: init\nid: 1065359156\ndata: [["key1",["value1"]],["key2",["value2","value3"]]]\n\nevent: update\nid: 1065376268\ndata: [["key2",["value2"]]]\n\nevent: update\nid: 1065371604\ndata: [["key3",["value4"]]]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"init"})," event contains all available data for the resource when the connection is created, and can be used to set up initial client state."]}),"\n",(0,r.jsxs)(t.p,{children:["Subsequent ",(0,r.jsx)(t.code,{children:"update"})," events indicate changes ",(0,r.jsx)(t.em,{children:"only"})," at the included keys: the first update here removes ",(0,r.jsx)(t.code,{children:'"value3"'})," from ",(0,r.jsx)(t.code,{children:'"key2"'}),", while the second removes adds a new entry associating ",(0,r.jsx)(t.code,{children:'"key3"'})," to ",(0,r.jsx)(t.code,{children:'"value4"'}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["All events include an ",(0,r.jsx)(t.code,{children:"id"})," metadata field which should mostly be ignored, but can be useful for debugging, replay, and similar purposes."]}),"\n",(0,r.jsxs)(t.p,{children:["In practice, client apps don't need to interact with this raw data stream: JavaScript provides a useful ",(0,r.jsx)(t.code,{children:"EventSource"})," interface to maintain the connection and register event-handler callbacks."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'const stream = new EventSource("http://reactive.service.hostname/my_resource/foo");\nstream.addEventListener("init", (e: MessageEvent<string>) => {\n  const initial_data = JSON.parse(e.data);\n  console.log("Initial data: ", initial_data);\n});\nstream.addEventListener("update", (e: MessageEvent<string>) => {\n  const updates = JSON.parse(e.data);\n  console.log("Updated data: ", updates);\n});\n'})}),"\n",(0,r.jsx)(t.h3,{id:"react-clients",children:"React clients"}),"\n",(0,r.jsxs)(t.p,{children:["This event-listener setup integrates cleanly with React-based frontends using ",(0,r.jsx)(t.a,{href:"https://react.dev/reference/react/useEffect",children:(0,r.jsx)(t.code,{children:"useEffect"})})," and ",(0,r.jsx)(t.a,{href:"https://react.dev/reference/react/useState",children:(0,r.jsx)(t.code,{children:"useState"})}),".\nA React component powered by a Skip reactive service can establish the event stream and register listener callbacks as follows, calling the React ",(0,r.jsx)(t.code,{children:"set"})," state functions within the callbacks with the data received from the reactive backend service."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'const [foo, setFoo] = useState(...);\nuseEffect(() => {\n  const stream = new EventSource("http://reactive.service.hostname/my_resource/foo");\n  stream.addEventListener("init", (e: MessageEvent<string>) => {\n    const initial_data = JSON.parse(e.data);\n\tconst initialFoo = ...; // create an initial "foo" using `initial_data`\n\tsetFoo(initialFoo);\n  });\n  stream.addEventListener("update", (e: MessageEvent<string>) => {\n    const updates = JSON.parse(e.data);\n\tconst updatedFoo = ...; // update "foo" using `updates`\n\tsetFoo(updatedfoo);\n  });\n  return () => {\n    stream.close();\n  };\n}, [])\n'})}),"\n",(0,r.jsx)(t.h2,{id:"synchronous-http-interface",children:"Synchronous HTTP interface"}),"\n",(0,r.jsx)(t.p,{children:"Skip reactive services also support synchronous (i.e. non-reactive) reads of resources, either in their entirety or at a specific key.\nNote that this requires instantiation of the resource, just the same as reactive streaming would.\nAs such, there is little advantage to synchronous reads in systems built using reactive services.\nThey are useful, however, for debugging the state of reactive systems and for maintaining compatibility with legacy systems and non-reactive clients."}),"\n",(0,r.jsxs)(t.p,{children:["To make a synchronous read, call either ",(0,r.jsx)(t.code,{children:"getAll"})," or ",(0,r.jsx)(t.code,{children:"getArray"})," on the reactive service handle (i.e. ",(0,r.jsx)(t.code,{children:"SkipServiceBroker"}),") in your web service to query the corresponding routes on the reactive service; an example using ",(0,r.jsx)(t.code,{children:"getArray"})," is given in the example Express web service ",(0,r.jsx)(t.a,{href:"/docs/client#example-web-service-configuration",children:"below"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Then, from your client, issue HTTP ",(0,r.jsx)(t.code,{children:"GET"})," requests to e.g. ",(0,r.jsx)(t.code,{children:"http://reactive.service.hostname/my_resource/foo/key1"})," to make a synchronous read of data in the ",(0,r.jsx)(t.code,{children:"foo"})," resource instance associated with key ",(0,r.jsx)(t.code,{children:"key1"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"example-web-service-configuration",children:"Example web service configuration"}),"\n",(0,r.jsx)(t.p,{children:"Skip reactive services instantiate resources on request, generating a UUID for each distinct query and serving the resulting stream of updates over HTTP.\nManaging these UUIDs is straightforward, but is best done using a traditional web service to request stream UUIDs and transparently redirect clients to their data."}),"\n",(0,r.jsxs)(t.p,{children:["A simple explanatory example is given here using the ",(0,r.jsx)(t.a,{href:"https://expressjs.com",children:"Express"})," web framework, but any web framework will do -- Skip is designed to work over HTTP with whatever backend framework you like."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import express from "express";\nconst app = express();\napp.use(express.json());\n\n// Specify the reactive service\'s address\nconst reactive_host = "reactive.service.hostname";\nconst streaming_port = 8080;\nconst control_port = 8081;\nconst reactive_service = new SkipServiceBroker({\n  host: reactive_host,\n  streaming_port,\n  control_port,\n});\n\n// On receiving a GET request for a reactive resource instance,\n//  1. Parse out any params from the request\n//  2. Request a stream identifier with those parameters from the reactive service\n//  3. Redirect the client to the corresponding stream address\napp.get("/my_resource/:id", (req, res) => {\n  const params = { id: req.params.id, foo: req.params.bar, ... };\n  reactive_service\n    .getStreamUUID("my_resource", params)\n    .then((uuid) => {\n      res.redirect(301, `http://${reactive_host}:${streaming_port}/v1/streams/${uuid}`);\n    })\n});\n\n// Synchronous read of a specific key in a resource instance\napp.get("/my_resource/:id/:key", (req, res) => {\n  const params = { id: req.params.id, foo: req.params.bar, ... };\n  reactive_service\n    .getArray("my_resource", params, req.params.key)\n    .then((data) => {\n      res.status(200).json(data);\n    });\n});\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);