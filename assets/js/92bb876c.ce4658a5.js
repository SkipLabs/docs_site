"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[9184],{2105:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting_started","title":"Getting started","description":"Installation","source":"@site/docs/getting_started.md","sourceDirName":".","slug":"/getting_started","permalink":"/docs/getting_started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/docs/introduction"},"next":{"title":"Writing functions","permalink":"/docs/functions"}}');var s=i(4848),r=i(8453);const a={},o="Getting started",c={},l=[{value:"Installation",id:"installation",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Tutorial",id:"tutorial",level:2},{value:"Reactive programming",id:"reactive-programming",level:3},{value:"The anatomy of a Skip service",id:"the-anatomy-of-a-skip-service",level:3},{value:"See it in action",id:"see-it-in-action",level:3},{value:"Next steps",id:"next-steps",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started",children:"Getting started"})}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Before you begin, we recommend installing the NPM packages for the Skip Framework."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"npm install @skiplabs/skip"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@skiplabs/skip"})," package just depends on the separate component packages:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skipruntime/core"}),": The Skip Runtime public API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skipruntime/server"}),": Expose a reactive service through HTTP/SSE servers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skipruntime/helpers"}),": Potentially useful functionality for working with Skip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skipruntime/wasm"}),": The Wasm version of the Skip Runtime"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"and optionally:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skipruntime/native"}),": The native version of the Skip Runtime"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skip-adapter/kafka"}),": Connector between Kafka and Skip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@skip-adapter/postgres"}),": Connector between PostgreSQL and Skip"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that two versions of the runtime are available, Wasm ",(0,s.jsx)(n.code,{children:"@skipruntime/wasm"})," and native ",(0,s.jsx)(n.code,{children:"@skipruntime/native"}),".\nThe Wasm runtime works with both ",(0,s.jsx)(n.code,{children:"node"})," and ",(0,s.jsx)(n.code,{children:"bun"}),", but is limited to Wasm's 32-bit memory address space.\nThe native runtime does not have this limitation, but it is currently only available for Node and is a bit more involved to install."]}),"\n",(0,s.jsxs)(n.p,{children:["The Wasm runtime is installed by default, but a package using Skip can choose to explicitly depend on only ",(0,s.jsx)(n.code,{children:"@skipruntime/core"}),", ",(0,s.jsx)(n.code,{children:"@skipruntime/server"}),", and ",(0,s.jsx)(n.code,{children:"@skipruntime/native"})," to reduce weight.\nThe Wasm runtime can be installed separately with ",(0,s.jsx)(n.code,{children:"npm install @skipruntime/wasm"})," and the native runtime by following the ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/addon/README.md#installation",children:"instructions"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"We have several resources available to help you learn the Skip framework, depending on your background and preferences."}),"\n",(0,s.jsx)(n.p,{children:'This guide takes a "top-down" approach, showing you how to use our APIs in an idiomatic and practical way.  We recommend that most users start here.'}),"\n",(0,s.jsxs)(n.p,{children:["Finally, if you'd like to just dive into the code, you can explore the ",(0,s.jsx)(n.a,{href:"api/core",children:"API docs"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/examples",children:"examples"})," of reactive services, or an ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/examples/hackernews",children:"example configuration"})," complete with reverse proxy and database, including a version with a distributed leader-follower configuration."]}),"\n",(0,s.jsx)(n.h2,{id:"tutorial",children:"Tutorial"}),"\n",(0,s.jsx)(n.p,{children:"This guide will walk you through getting your first reactive service up and running using the Skip runtime.\nIt will also show how to write client code to read or subscribe to data from your reactive service."}),"\n",(0,s.jsx)(n.p,{children:"We aim to make this as beginner friendly as possible, but assume an understanding of programming basics, including core JavaScript/TypeScript syntax and semantics."}),"\n",(0,s.jsx)(n.h3,{id:"reactive-programming",children:"Reactive programming"}),"\n",(0,s.jsxs)(n.p,{children:["Skip is a framework for building ",(0,s.jsx)(n.em,{children:"reactive"})," software which is responsive to changing inputs in real-time, efficient to execute, and intuitive to write and reason about."]}),"\n",(0,s.jsx)(n.p,{children:'From the outside, reactive services can be treated similarly to streaming sources: they push real-time updates to clients and other subscribers, supporting smooth real-time user experiences.\nUnlike event-based streaming frameworks, though, Skip programs are written in a declarative style: instead of reasoning about updates directly, you write code that reasons about a "current" snapshot of state, and the Skip framework automatically processes changes and keeps everything in sync.'}),"\n",(0,s.jsxs)(n.p,{children:["In order to do so, Skip tracks dependencies in a ",(0,s.jsx)(n.em,{children:"computation graph"})," in which input changes can be propagated through to relevant outputs ",(0,s.jsx)(n.em,{children:"without"})," reevaluating any computation whose inputs haven't changed."]}),"\n",(0,s.jsx)(n.p,{children:"Skip's core abstractions are best understood in terms of this computation graph."}),"\n",(0,s.jsxs)(n.p,{children:["The primary data structure used in Skip is called a ",(0,s.jsx)(n.em,{children:"collection"}),", and associates ",(0,s.jsx)(n.em,{children:"keys"})," with one or more ",(0,s.jsx)(n.em,{children:"values"}),".\nCollection keys and values are both immutable data stored in the Skip framework's native heap; in TypeScript, any JSON-serializable value can be used (that is:  primitives, arrays, objects, and nested combinations thereof, but not functions or classes).\nCollections can be accessed by key or manipulated to create new collections."]}),"\n",(0,s.jsxs)(n.p,{children:["These manipulations do ",(0,s.jsx)(n.em,{children:"not"})," mutate in-place but instead create a ",(0,s.jsx)(n.em,{children:"new"})," collection in the computation graph with a dependency edge from the input collection(s).\nFor example, ",(0,s.jsx)(n.code,{children:"collection.map(Foo)"})," creates a ",(0,s.jsx)(n.em,{children:"new"})," collection with the results of applying ",(0,s.jsx)(n.code,{children:"Foo"})," to the data in ",(0,s.jsx)(n.code,{children:"collection"}),", which is then updated in real time whenever the contents of ",(0,s.jsx)(n.code,{children:"collection"})," change.\n(Along with ",(0,s.jsx)(n.code,{children:"map"}),", Skip collections offer ",(0,s.jsx)(n.code,{children:"mapReduce"})," and utilities like ",(0,s.jsx)(n.code,{children:"merge"}),", ",(0,s.jsx)(n.code,{children:"slice"}),", etc.)"]}),"\n",(0,s.jsxs)(n.p,{children:["Maps and other operations over Skip collections can be sequenced and combined to create complex computation graphs which are maintained up-to-date by reexecuting computation edges when inputs change.\nDue to the structured nature of collections and maps, this can be done very efficiently -- always proportional to the size of the ",(0,s.jsx)(n.em,{children:"change"}),", not the total size of the collection."]}),"\n",(0,s.jsxs)(n.p,{children:["However, in order for the Skip framework to process updates correctly by reexecuting portions of its computation graph on changed inputs, it is crucial to capture all relevant dependencies.\nFor example, if a ",(0,s.jsx)(n.em,{children:"mapper function"})," (like ",(0,s.jsx)(n.code,{children:"Foo"})," above) reads and/or writes some global mutable state, then it may produce unexpected values when reexecuted by the framework.\nIn order to mitigate this, Skip programs written in TypeScript use ",(0,s.jsx)(n.code,{children:"Mapper"})," classes to define reactive computations which avoid the most problematic cases of untracked dependencies.\nNonetheless, while reading this guide and working with Skip, it is important to reason about (im)mutability and avoid side-effects in your code so that it can be reliably evaluated by the framework."]}),"\n",(0,s.jsxs)(n.p,{children:["Some examples of Mappers are shown ",(0,s.jsx)(n.a,{href:"getting_started#the-anatomy-of-a-skip-service",children:"below"})," and more details are available ",(0,s.jsx)(n.a,{href:"/docs/functions",children:"here"})," or in the API ",(0,s.jsx)(n.a,{href:"api/core",children:"docs"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"the-anatomy-of-a-skip-service",children:"The anatomy of a Skip service"}),"\n",(0,s.jsx)(n.p,{children:"Let's consider an example reactive service, powering a real-time feature in a social media application with the following types."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserID = number;\ntype GroupID = number;\ntype User = { name: string; active?: boolean; friends: UserID[] };\ntype Group = { name: string; members: UserID[] };\n"})}),"\n",(0,s.jsx)(n.p,{children:"Suppose we want to display to users which of their currently-active friends are members of some group(s)."}),"\n",(0,s.jsxs)(n.p,{children:["The logic is straightforward: filter the group's ",(0,s.jsx)(n.code,{children:"members"})," by (1) intersection with the current user's ",(0,s.jsx)(n.code,{children:"friends"})," and (2) those friends' ",(0,s.jsx)(n.code,{children:"active"})," status.\nHowever, it is far from trivial to maintain up-to-date information in real time as group membership lists, user friend lists, and user activity status are all changing.\nSkip is designed to bridge this gap, letting you express the moment-in-time logic and leave updates and state management to the framework."]}),"\n",(0,s.jsxs)(n.p,{children:["At its core, a Skip service is a reactive computation graph describing how to compute some output ",(0,s.jsx)(n.em,{children:"resources"})," from some input data and/or external API inputs."]}),"\n",(0,s.jsxs)(n.p,{children:["A service is specified by an object passed to ",(0,s.jsx)(n.code,{children:"runService"}),", which will then spin up a Skip runtime and server.\nThat object consists of ",(0,s.jsx)(n.code,{children:"initialData"})," used to populate the service's input collections, some ",(0,s.jsx)(n.code,{children:"resources"})," to make available over HTTP, and a function ",(0,s.jsx)(n.code,{children:"createGraph"})," defining a shared computation graph mapping the ",(0,s.jsx)(n.code,{children:"ServiceInputs"})," to ",(0,s.jsx)(n.code,{children:"ResourceInputs"}),".\nThis shared computation graph will be maintained up-to-date at all times, and can be an arbitrarily complex computation graph or as simple as returning the input collections directly, depending on the service."]}),"\n",(0,s.jsxs)(n.p,{children:["In this example, we pull initial user and group data from an external source-of-truth database, expose a single resource called ",(0,s.jsx)(n.code,{children:"activeFriends"}),", and define a reactive computation of the active users in each group."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import {\n    type EagerCollection,\n    type InitialData,\n    type Mapper,\n    type Values,\n} from "@skipruntime/core";\n\n// Type alias for inputs to our service\ntype ServiceInputs = {\n  users: EagerCollection<UserID, User>;\n  groups: EagerCollection<GroupID, Group>;\n};\n\n// Type alias for inputs to the active friends resource\ntype ResourceInputs = {\n  users: EagerCollection<UserID, User>;\n  activeMembers: EagerCollection<GroupID, UserID>;\n};\n\n// Mapper function to compute the active users of each group\nclass ActiveMembers implements Mapper<GroupID, Group, GroupID, UserID> {\n  constructor(private users: EagerCollection<UserID, User>) {}\n\n  mapEntry(gid: GroupID, group: Values<Group>): Iterable<[GroupID, UserID]> {\n    return group\n      .getUnique()\n      .members.flatMap((uid) =>\n        this.users.getUnique(uid).active ? [[gid, uid]] : [],\n      );\n  }\n}\n\n// Load initial data from a source-of-truth database (empty for now for simplicity)\nconst initialData: InitialData<ServiceInputs> = {\n  users: [],\n  groups: [],\n};\n\n// Specify and run the reactive service\nconst service = {\n  initialData,\n  resources: {},\n  createGraph(input: ServiceInputs): ResourceInputs {\n    const activeMembers = input.groups.map(ActiveMembers, input.users);\n    return { users: input.users, activeMembers };\n  },\n};\nawait runService(service);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This example service operates over two ",(0,s.jsx)(n.em,{children:"input collections"})," (one for users and one for groups, as specified by ",(0,s.jsx)(n.code,{children:"ServiceInputs"}),") and passes some ",(0,s.jsx)(n.code,{children:"ResourceInputs"})," to its resources: a reactively-computed collection ",(0,s.jsx)(n.code,{children:"activeMembers"})," of the set of active users in each group, along with the ",(0,s.jsx)(n.code,{children:"users"})," input collection.\nThis ",(0,s.jsx)(n.code,{children:"activeMembers"}),' collection is the "output" of the shared computation graph, produced by mapping over the input groups and taking users that have the ',(0,s.jsx)(n.code,{children:"active"})," flag set; since this only has to be done once for the entire service, it can be maintained at all times."]}),"\n",(0,s.jsx)(n.p,{children:"Our service wants to expose a resource -- parameterized by a user ID -- which can be queried or subscribed to by clients to view that user's active friends in each group.\nMaintaining this resource up-to-date for all users at all times would be infeasible at scale, so resources can make dynamic extensions to the reactive computation graph which are instantiated/dropped as needed to serve requests."}),"\n",(0,s.jsxs)(n.p,{children:["Resources are parameterized by some input HTTP ",(0,s.jsx)(n.code,{children:"params"})," and use an ",(0,s.jsx)(n.code,{children:"instantiate"})," function to set up any reactive computation, operating over the service's ",(0,s.jsx)(n.code,{children:"ResourceInputs"})," to produce a single output collection."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import {\n    type EagerCollection,\n    type InitialData,\n    type Mapper,\n    type Values,\n    // two more types to import here\n    type Json,\n    type Resource,\n} from "@skipruntime/core";\n\n// ... rest of your code so far\n\n// Mapper function to find users that are active and also friends with `user`\nclass FilterFriends implements Mapper<GroupID, UserID, GroupID, UserID> {\n  constructor(private readonly user: User) {}\n\n  mapEntry(gid: GroupID, uids: Values<UserID>): Iterable<[GroupID, UserID]> {\n    return uids\n      .toArray()\n      .flatMap((uid) => (this.user.friends.includes(uid) ? [[gid, uid]] : []));\n  }\n}\n\nclass ActiveFriends implements Resource<ResourceInputs> {\n  private readonly uid: UserID;\n\n  constructor(params: Json) {\n    if (typeof params != "number")\n      throw new Error("Missing required number parameter \'uid\'");\n    this.uid = params;\n  }\n\n  instantiate(inputs: ResourceInputs): EagerCollection<GroupID, UserID> {\n    const user = inputs.users.getUnique(this.uid);\n    return inputs.activeMembers.map(FilterFriends, user);\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, our ",(0,s.jsx)(n.code,{children:"ActiveFriends"})," resource filters each groups' current active users to those users who are also currently friends with the given ",(0,s.jsx)(n.code,{children:"uid"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Now, all we need to do is run the Skip service and broker."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { runService } from "@skipruntime/server";\n\n// Service definition\nconst service = {\n    initialData,\n    resources: { active_friends: ActiveFriends },\n    createGraph(input: ServiceInputs): ResourceInputs {\n        const users = input.users;\n        const activeMembers = input.groups.map(ActiveMembers, users);\n        const _groupsPerUser = input.groups.map(GroupsPerUser);\n        const _numFriendsPerUser = users.map(NumFriendsPerUser);\n        const _numActiveMembers = activeMembers.map(NumActiveMembers);\n        return { users, activeMembers };\n    },\n};\n\n// Run the reactive service\nconst server = await runService(service, {\n    streaming_port: 8080,\n    control_port: 8081,\n});\n\n// Initialize the SkipServiceBroker\nconst serviceBroker = new SkipServiceBroker({\n    host: "localhost",\n    control_port: 8081,\n    streaming_port: 8080,\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"In your terminal, you should see the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"Skip control service listening on port 8081\nSkip streaming service listening on port 8080\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For the sake of the example, you may want to change ",(0,s.jsx)(n.code,{children:"initialData"})," for some mock data e.g."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const initialData: InitialData<ServiceInputs> = {\n    users: [\n        [0, [{ name: "Bob", active: true, friends: [1, 2] }]],\n        [1, [{ name: "Alice", active: true, friends: [0, 2] }]],\n        [2, [{ name: "Carol", active: false, friends: [0, 1] }]],\n        [3, [{ name: "Eve", active: true, friends: [] }]],\n    ],\n    groups: [\n        [1001, [{ name: "Group 1", members: [1, 2, 3] }]],\n        [1002, [{ name: "Group 2", members: [0, 2] }]],\n    ],\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"see-it-in-action",children:"See it in action"}),"\n",(0,s.jsxs)(n.p,{children:["This guide aims to give the high-level ideas of how to write and reason about a Skip reactive service.\nYou can see and run the full example ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/examples/groups.ts",children:"here"}),", along with a corresponding ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/examples/groups-server.ts",children:"web application"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/examples/groups-client.ts",children:"client"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Run the service and web app as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cd skipruntime-ts/examples\nnpm run build\nnode dist/groups-server.js &\nnode dist/groups.js &\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With the reactive service running, you can run the client script with ",(0,s.jsx)(n.code,{children:"node dist/groups-client.js"})," and see changes in ",(0,s.jsx)(n.code,{children:"active_friends"})," reflected in real time as users' friend lists, ",(0,s.jsx)(n.code,{children:"active"})," status, and group memberships change."]}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, use curl to listen for updates, e.g. with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl -LN http://localhost:8082/active_friends/0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and see the raw event stream as you issue updates to the input ",(0,s.jsx)(n.code,{children:"users"})," and ",(0,s.jsx)(n.code,{children:"groups"})," data from another shell."]}),"\n",(0,s.jsx)(n.h3,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsx)(n.p,{children:"This guide implements an example reactive service which can be queried or subscribed to by users' clients to see up-to-date listings of which of their active friends belong to each group, maintained up to date as input data changes without any explicit management of updates in the service's declarative logic."}),"\n",(0,s.jsxs)(n.p,{children:["We've shown the core reactive logic here without going into full detail on how to deploy and interact with a Skip service; see the ",(0,s.jsx)(n.a,{href:"/docs/deploying",children:"Deploying"})," guide for more details on how to wire reactivity into a generic web application, including how to handle user writes and feed those into input collections."]}),"\n",(0,s.jsxs)(n.p,{children:["We've also elided the details of syncing data from external sources like databases or non-reactive APIs; see the ",(0,s.jsx)(n.a,{href:"/docs/externals",children:"Externals"})," guide for more details on how to keep your reactive service hydrated and in sync with updates from other components of your application."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);