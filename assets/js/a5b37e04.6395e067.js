"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[3484],{7776:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});var t=r(9789),s=r(4848),i=r(8453);const a={title:"Reactive Social Network Service with Skip",description:"Build step by step a skip service",slug:"reactive_social_network_service_poc",date:new Date("2025-04-30T00:00:00.000Z"),authors:"hubyrod"},o=void 0,c={authorsImageUrls:[void 0]},l=[{value:"The Simpler, the Better",id:"the-simpler-the-better",level:3},{value:"Step 1: The TypeScript Project",id:"step-1-the-typescript-project",level:3},{value:"Step 2: The Skip Service",id:"step-2-the-skip-service",level:3},{value:"Step 3: The Server",id:"step-3-the-server",level:3},{value:"Step 4: Let&#39;s See It Work",id:"step-4-lets-see-it-work",level:3},{value:"Wrapping Up",id:"wrapping-up",level:3},{value:"What&#39;s next?",id:"whats-next",level:3}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Reactive programming often sounds complex\u2014but it doesn't have to be. What if you could actually see how data responds to change, in real time, right from your terminal?"}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, we walk through building a small proof-of-concept social network backend using ",(0,s.jsx)(n.a,{href:"https://www.skiplabs.io/",children:"Skip"}),' and TypeScript. It tracks users, groups, and their friendships\u2014with automatic updates to "active friends" using Skip\u2019s reactive computation graph.']}),"\n",(0,s.jsx)(n.p,{children:"You\u2019ll learn how to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Set up a reactive Skip service"}),"\n",(0,s.jsx)(n.li,{children:"Define users and groups as live-updating resources"}),"\n",(0,s.jsx)(n.li,{children:"Connect it all to a REST API using Express"}),"\n",(0,s.jsx)(n.li,{children:"Observe real-time updates as the data evolves"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'"The simpler, the merrier" \u2014 this project keeps things minimal, focused, and easy to explore.'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"From Alice adding a new friend to live data reactions, this guide makes reactive systems tangible."}),"\n","\n",(0,s.jsx)(n.h3,{id:"the-simpler-the-better",children:"The Simpler, the Better"}),"\n",(0,s.jsxs)(n.p,{children:['Ever heard the saying, "The simpler, the better"? Well, that especially holds true when it comes to learning\u2014particularly in reactive programming. Think of it like what we expect from a social network: ',(0,s.jsx)(n.em,{children:"reactivity"})," in response to change. Sure, a full-blown social network has more bells and whistles than a carnival, but here we're just tackling a small piece of it. This guide keeps things light and breezy, focusing on the essentials to show how to build a reactive system using ",(0,s.jsx)(n.strong,{children:"Skip"}),". It's a proof of concept."]}),"\n",(0,s.jsx)(n.p,{children:"By keeping things simple and working right in the terminal, we can easily follow how data flows and how changes propagate without getting lost in complexity."}),"\n",(0,s.jsx)(n.p,{children:"We'll start by setting up a Node project with TypeScript. Then, we'll define our data types. Since this is a social network, we want to represent friends and determine if they're active in a given group. We'll define members with names and associated groups, and for each group, we'll track whether a given member is active. After that, we'll build the Skip service, and finally, we'll wrap things up with a web server that uses the reactive service. All this will be wrapped up in an example where Alice makes a new friend."}),"\n",(0,s.jsxs)(n.p,{children:["You can follow along with ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc",children:"the full code on GitHub"}),", structured with a commit for each step:"]}),"\n",(0,s.jsx)(n.h3,{id:"step-1-the-typescript-project",children:"Step 1: The TypeScript Project"}),"\n",(0,s.jsxs)(n.p,{children:["The whole first step can be found ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc/commit/b424165666b45a9d17b969f2422941f748556c85",children:"here on GitHub"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This first project really is Basic TypeScript 101, but watch out for some details such as the configuration of ",(0,s.jsx)(n.code,{children:"package.json"})," and ",(0,s.jsx)(n.code,{children:"tsconfig.json"}),". These two files can be sneaky little configuration traps if you're not careful. They might seem straightforward, but trust me, they can trip you up when you least expect it. So, keep an eye out and make sure everything is set up just right."]}),"\n",(0,s.jsx)(n.p,{children:"Let's create a directory for this proof-of-concept:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir reactive_social_network_service\ncd reactive_social_network_service\n"})}),"\n",(0,s.jsx)(n.p,{children:"And now the TypeScript project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'npm init -y\nnpm install --save-dev typescript @types/node\nmkdir -p src\nnpx tsc --init \\\n    --target ES2022 \\\n    --module nodenext \\\n    --rootDir "./src" \\\n    --outDir "./dist" \\\n    --moduleResolution nodenext\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Configuration of ",(0,s.jsx)(n.code,{children:"package.json"})," to prepare the project for what's about to come:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'npm pkg set type="module"\nnpm pkg set scripts.build="tsc"\nnpm pkg set scripts.start="node dist/index.js"\nnpm pkg set scripts.clean="rm -rf dist node_modules"\n'})}),"\n",(0,s.jsx)(n.p,{children:"We are now ready to enter the Skip world!"}),"\n",(0,s.jsx)(n.h3,{id:"step-2-the-skip-service",children:"Step 2: The Skip Service"}),"\n",(0,s.jsxs)(n.p,{children:["The whole second step can be found ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc/commit/a63289aaae2404e62d1d212d870be042ab47f3e5",children:"here on GitHub"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"We are going to need SkipLabs packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm add @skiplabs/skip\n"})}),"\n",(0,s.jsx)(n.p,{children:"So you better understand where we are heading, here is what the source directory will eventually look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"src\n    activefriends.mts\n    data.mts\n    index.ts\n    skipservice.mts\n    types.mts\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And we start with the necessary types. In a nutshell, Skip defines a resource as the output of a Skip service. A resource is updated and maintained reactively. A collection is the core data structure over which reactive computations operate. An ",(0,s.jsx)(n.code,{children:"EagerCollection"})," is always kept up-to-date. ",(0,s.jsx)(n.code,{children:"LazyCollection"})," exists as well for evaluation upon queries only, but we are not using them in this proof-of-concept."]}),"\n",(0,s.jsxs)(n.p,{children:["Here the code for ",(0,s.jsx)(n.code,{children:"src/types.mts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import {\n    type EagerCollection,\n} from "@skipruntime/core";\n\ntype UserID = number;\ntype GroupID = number;\ntype User = { name: string; active?: boolean; friends: UserID[] };\ntype Group = { name: string; members: UserID[] };\n\ntype ServiceInputs = {\n    users: EagerCollection<UserID, User>;\n    groups: EagerCollection<GroupID, Group>;\n};\n\ntype ResourceInputs = {\n    users: EagerCollection<UserID, User>;\n    activeMembers: EagerCollection<GroupID, UserID>;\n};\n\nexport type {\n    UserID,\n    GroupID,\n    User,\n    Group,\n    ServiceInputs,\n    ResourceInputs,\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now some data to get started. Outside this proof-of-concept, this would come from your database."}),"\n",(0,s.jsx)(n.p,{children:"Four users and two groups e.g. Carol is in both groups but inactive."}),"\n",(0,s.jsxs)(n.p,{children:["Here is the code for ",(0,s.jsx)(n.code,{children:"src/data.mts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { InitialData } from "@skipruntime/core";\nimport { ServiceInputs } from "./types.mjs";\n\n// Initial data for the social network service\nconst initialData: InitialData<ServiceInputs> = {\n    users: [\n        [0, [{ name: "Bob", active: true, friends: [1, 2] }]],\n        [1, [{ name: "Alice", active: true, friends: [0, 2] }]],\n        [2, [{ name: "Carol", active: false, friends: [0, 1] }]],\n        [3, [{ name: "Eve", active: true, friends: [] }]],\n    ],\n    groups: [\n        [1001, [{ name: "Group 1", members: [1, 2, 3] }]],\n        [1002, [{ name: "Group 2", members: [0, 2] }]],\n    ],\n};\n\nexport { initialData };\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Let's talk about active friends! For that, we need to define a filter for that ",(0,s.jsx)(n.code,{children:"active"})," boolean. We are going to use a mapper. In Skip, a mapper describes a computation from keys/values in one collection to keys/values in another collection. It forms the edges of the Skip reactive computation graph, specifying transformations and compositions of data to produce intermediate results and outputs."]}),"\n",(0,s.jsx)(n.p,{children:"We are defining two mappers and a resource: one mapper to retrieve active members out of a given group, one mapper to retrieve friends of a given user out of a given group, and a resource which will hold active friends for a given user."}),"\n",(0,s.jsxs)(n.p,{children:["Here is the code for ",(0,s.jsx)(n.code,{children:"src/activefriends.mts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import {\n    type EagerCollection,\n    type Json,\n    type Mapper,\n    type Resource,\n    type Values,\n} from "@skipruntime/core";\n\nimport { GroupID, Group, UserID, User, ResourceInputs } from "./types.mjs";\n\n// Mapper functions for reactive data transformations\nclass ActiveMembers implements Mapper<GroupID, Group, GroupID, UserID> {\n    constructor(private users: EagerCollection<UserID, User>) { }\n\n    // Maps group members to active users only\n    mapEntry(gid: GroupID, group: Values<Group>): Iterable<[GroupID, UserID]> {\n        return group\n            .getUnique()\n            .members.flatMap((uid: UserID) =>\n                this.users.getUnique(uid).active ? [[gid, uid]] : [],\n            );\n    }\n}\n\n// Filters group members to only include friends of a specific user\nclass FilterFriends implements Mapper<GroupID, UserID, GroupID, UserID> {\n    constructor(private readonly user: User) { }\n\n    mapEntry(gid: GroupID, uids: Values<UserID>): Iterable<[GroupID, UserID]> {\n        return uids\n            .toArray()\n            .flatMap((uid: UserID) => (this.user.friends.includes(uid) ? [[gid, uid]] : []));\n    }\n}\n\n// Resource that provides active friends for a given user\nclass ActiveFriends implements Resource<ResourceInputs> {\n    private readonly uid: UserID;\n\n    constructor(params: Json) {\n        if (typeof params != "number")\n            throw new Error("Missing required number parameter \'uid\'");\n        this.uid = params;\n    }\n\n    // Creates a collection of active friends for the specified user\n    instantiate(inputs: ResourceInputs): EagerCollection<GroupID, UserID> {\n        const user = inputs.users.getUnique(this.uid);\n        return inputs.activeMembers.map(FilterFriends, user);\n    }\n}\n\nexport { ActiveMembers, ActiveFriends };\n'})}),"\n",(0,s.jsx)(n.p,{children:"And now the Skip service itself. It encompasses a server and a broker."}),"\n",(0,s.jsxs)(n.p,{children:["Here is the code for ",(0,s.jsx)(n.code,{children:"src/skipservice.mts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { runService } from "@skipruntime/server";\nimport { SkipServiceBroker } from "@skipruntime/helpers";\n\nimport { ResourceInputs, ServiceInputs } from "./types.mjs";\nimport { initialData } from "./data.mjs";\nimport { ActiveFriends, ActiveMembers } from "./activefriends.mjs";\n\n// Service configuration and reactive graph definition\nconst service = {\n    initialData,\n    resources: { active_friends: ActiveFriends },\n    // Creates the reactive data flow graph\n    createGraph(input: ServiceInputs): ResourceInputs {\n        const users = input.users;\n        const activeMembers = input.groups.map(ActiveMembers, users);\n        return { users, activeMembers };\n    },\n};\n\n// Start the reactive service with specified ports\nconst server = await runService(service, {\n    streaming_port: 8080,\n    control_port: 8081,\n});\n\n// Initialize the service broker for client communication\nconst serviceBroker = new SkipServiceBroker({\n    host: "localhost",\n    control_port: 8081,\n    streaming_port: 8080,\n});\n\nexport { server, serviceBroker };\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-the-server",children:"Step 3: The Server"}),"\n",(0,s.jsxs)(n.p,{children:["The whole first step can be found ",(0,s.jsx)(n.a,{href:"https://github.com/SkipLabs/reactive_social_network_service_poc/commit/5fb3308540468243eeb10972d2ace887d5d3678b",children:"here on GitHub"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To use the Skip service, we are creating an ",(0,s.jsx)(n.a,{href:"https://expressjs.com/",children:"Express"})," server:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install express\nnpm install --save-dev @types/express\n"})}),"\n",(0,s.jsx)(n.p,{children:"This server will expose an API to monitor active friends, and modify users and groups."}),"\n",(0,s.jsxs)(n.p,{children:["Here is the code for ",(0,s.jsx)(n.code,{children:"src/index.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\nimport { server, serviceBroker } from "./skipservice.mjs";\n\n// Initialize Express app\nconst app = express();\napp.use(express.json());\n\n// Store a reference to the Express server\nconst expressServer = app.listen(8082, () => {\n    console.log(`Web server listening at port 8082`);\n});\n\n// Utility function to handle errors\nconst handleError = (res: Response, error: unknown) => {\n    console.error("Error: ", error);\n    res.status(500).json(error);\n};\n\n// Route handlers\nconst getActiveFriends = async (req: Request, res: Response) => {\n    try {\n        const uuid = await serviceBroker.getStreamUUID("active_friends", Number(req.params.uid));\n        res.redirect(301, `http://localhost:8080/v1/streams/${uuid}`);\n    } catch (error) {\n        handleError(res, error);\n    }\n};\n\nconst updateEntity = async (entity: string, idParam: string, req: Request, res: Response) => {\n    try {\n        const id = Number(req.params[idParam]);\n        await serviceBroker.update(entity, [[id, [req.body]]]);\n        res.status(200).json({});\n    } catch (error) {\n        handleError(res, error);\n    }\n};\n\n// Define routes\napp.get("/active_friends/:uid", getActiveFriends);\napp.put("/users/:uid", (req: Request, res: Response) => updateEntity("users", "uid", req, res));\napp.put("/groups/:gid", (req: Request, res: Response) => updateEntity("groups", "gid", req, res));\n\n// Graceful shutdown handler for:\n// - SIGINT: Ctrl+C in terminal\n// - SIGTERM: System termination requests (kill command, container orchestration, etc.)\n["SIGTERM", "SIGINT"].forEach((sig) => process.on(sig, async () => {\n    await server.close();\n    expressServer.close(() => {\n        console.log("\\nServers shut down.");\n    });\n}));\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's install, build and start it!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install\nnpm run build\nnpm run start\n"})}),"\n",(0,s.jsx)(n.p,{children:"Starting the server will display something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> reactive_social_network_service@1.0.0 start\n> node dist/index.js\n\nSkip control service listening on port 8081\nSkip streaming service listening on port 8080\nWeb server listening at port 8082\n"})}),"\n",(0,s.jsx)(n.p,{children:"The Express server listens to the steaming service for updates, and it is now time see it in action!"}),"\n",(0,s.jsx)(n.h3,{id:"step-4-lets-see-it-work",children:"Step 4: Let's See It Work"}),"\n",(0,s.jsx)(n.p,{children:"We are going to use three terminals: one is already running the server and the service, one will issue writes on port 8081, and one will watch changes on port 8082."}),"\n",(0,s.jsxs)(n.p,{children:["While the service is running, in a fresh terminal, we are going to listen for changes on Alice's friends (index ",(0,s.jsx)(n.code,{children:"1"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -LN http://localhost:8082/active_friends/1 # Alice's active friends\n"})}),"\n",(0,s.jsx)(n.p,{children:"The previous command will continue listening after displaying the following, hence you won't get any prompt back."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"event: init\nid: <SOME_HASH>\ndata: [[1002,[0]]]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Leave it like that and open the third and last terminal in which we are going to add and remove values to the initial data: the list of Alice friends is about to evolve:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl http://localhost:8081/v1/inputs/users \\\n    -X PATCH \\\n    --json \'[[1, [\n    {\n        "name": "Alice",\n        "active": true,\n        "friends": [0, 2, 3]\n        }\n    ]]]\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"What do you see in the second terminal? The data is being reactively updated. Go ahead and try other modifications e.g. Bob turns inactive, Alice removes Carol from her group of friends."}),"\n",(0,s.jsx)(n.h3,{id:"wrapping-up",children:"Wrapping Up"}),"\n",(0,s.jsx)(n.p,{children:"Reactive programming doesn't have to be intimidating. With Skip, we've seen how simple it is to wire up reactivity\u2014from raw data all the way to live updates in an API. The idea is simple: when something changes, everything that depends on it updates automatically. And that's exactly what we built."}),"\n",(0,s.jsx)(n.p,{children:"Of course, this is just the beginning. You now have a foundation for reactive services, and from here, the possibilities are wide open. Want to plug it into a real-time dashboard? Hook it into a game? Build collaborative tools?"}),"\n",(0,s.jsx)(n.h3,{id:"whats-next",children:"What's next?"}),"\n",(0,s.jsx)(n.p,{children:"For the next Skip article, what should I tackle first? You tell me!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Listening to live changes from a PostgreSQL database?"}),"\n",(0,s.jsx)(n.li,{children:"Scaling your Skip service horizontally?"}),"\n",(0,s.jsx)(n.li,{children:"Integrating with frontend frameworks like React?"}),"\n",(0,s.jsx)(n.li,{children:"Managing authorization and privacy per user?"}),"\n",(0,s.jsx)(n.li,{children:"What else would be useful to your projects?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We've exposed reactive programming in the nude, 'scuse my french. The reactive world can be vast and complex but SKIP will be your guide and now you've got a solid start."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},9789:e=>{e.exports=JSON.parse('{"permalink":"/blog/reactive_social_network_service_poc","source":"@site/blog/reactive_social_skip_service_poc.md","title":"Reactive Social Network Service with Skip","description":"Build step by step a skip service","date":"2025-04-30T00:00:00.000Z","tags":[],"readingTime":9.93,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Reactive Social Network Service with Skip","description":"Build step by step a skip service","slug":"reactive_social_network_service_poc","date":"2025-04-30T00:00:00.000Z","authors":"hubyrod"},"unlisted":false,"prevItem":{"title":"Building a Real-time Blog with Skip and PostgreSQL","permalink":"/blog/postgresql_and_skip"},"nextItem":{"title":"Event-Hidden Architectures","permalink":"/blog/event-hidden-arch"}}')}}]);