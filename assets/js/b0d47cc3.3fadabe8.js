"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[3261],{1981:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/core/classes/OneToManyMapper","title":"abstract OneToManyMapper&lt;K, V1, V2&gt;","description":"Specialized Mapper which maps values one-to-many.","source":"@site/docs/api/core/classes/OneToManyMapper.md","sourceDirName":"api/core/classes","slug":"/api/core/classes/OneToManyMapper","permalink":"/docs/api/core/classes/OneToManyMapper","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"ManyToOneMapper","permalink":"/docs/api/core/classes/ManyToOneMapper"},"next":{"title":"OneToOneMapper","permalink":"/docs/api/core/classes/OneToOneMapper"}}');var t=n(4848),a=n(8453);const c={},i="abstract OneToManyMapper<K, V1, V2>",d={},l=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Implements",id:"implements",level:2},{value:"Methods",id:"methods",level:2},{value:"mapValue()",id:"mapvalue",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4}];function o(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsxs)(s.h1,{id:"abstract-onetomanymapperk-v1-v2",children:[(0,t.jsx)(s.code,{children:"abstract"})," OneToManyMapper<K, V1, V2>"]})}),"\n",(0,t.jsxs)(s.p,{children:["Specialized ",(0,t.jsx)(s.code,{children:"Mapper"})," which maps values one-to-many."]}),"\n",(0,t.jsxs)(s.p,{children:["A specialized form of ",(0,t.jsx)(s.code,{children:"Mapper"})," which maps values one-to-many, reusing the input collection's key structure in the output collection.\nUse this form to map each value associated with a key to any number of values for that same key.\nThis saves some boilerplate: instead of writing the fully general ",(0,t.jsx)(s.code,{children:"mapEntry"})," that potentially modifies, adds, or removes keys, just implement the simpler ",(0,t.jsx)(s.code,{children:"mapValue"})," to transform the values associated with each key."]}),"\n",(0,t.jsx)(s.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type Parameter"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"K"})," ",(0,t.jsx)(s.em,{children:"extends"})," ",(0,t.jsx)(s.a,{href:"/docs/api/core/type-aliases/Json",children:(0,t.jsx)(s.code,{children:"Json"})})]}),(0,t.jsx)(s.td,{children:"Type of input and output keys."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"V1"})," ",(0,t.jsx)(s.em,{children:"extends"})," ",(0,t.jsx)(s.a,{href:"/docs/api/core/type-aliases/Json",children:(0,t.jsx)(s.code,{children:"Json"})})]}),(0,t.jsx)(s.td,{children:"Type of input values."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"V2"})," ",(0,t.jsx)(s.em,{children:"extends"})," ",(0,t.jsx)(s.a,{href:"/docs/api/core/type-aliases/Json",children:(0,t.jsx)(s.code,{children:"Json"})})]}),(0,t.jsx)(s.td,{children:"Type of output values."})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"implements",children:"Implements"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/api/core/interfaces/Mapper",children:(0,t.jsx)(s.code,{children:"Mapper"})}),"<",(0,t.jsx)(s.code,{children:"K"}),", ",(0,t.jsx)(s.code,{children:"V1"}),", ",(0,t.jsx)(s.code,{children:"K"}),", ",(0,t.jsx)(s.code,{children:"V2"}),">"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"mapvalue",children:"mapValue()"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"abstract mapValue(value, key): V2[]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["From an input ",(0,t.jsx)(s.code,{children:"key"}),"-",(0,t.jsx)(s.code,{children:"values"})," association, produce some output values to associate to ",(0,t.jsx)(s.code,{children:"key"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"value"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"V1"})," & ",(0,t.jsx)(s.a,{href:"/docs/api/core/type-aliases/DepSafe",children:(0,t.jsx)(s.code,{children:"DepSafe"})})]}),(0,t.jsxs)(s.td,{children:["A value associated with ",(0,t.jsx)(s.code,{children:"key"})," in the input collection."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"key"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"K"})}),(0,t.jsx)(s.td,{children:"A key found in the input collection."})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"V2"}),"[]"]}),"\n",(0,t.jsxs)(s.p,{children:["Values to associate with ",(0,t.jsx)(s.code,{children:"key"})," in the output collection."]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>i});var r=n(6540);const t={},a=r.createContext(t);function c(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);