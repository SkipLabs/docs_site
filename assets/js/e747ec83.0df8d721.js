"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[7051],{4290:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"glossary","title":"Glossary","description":"This page defines and briefly explains the terminology and main concepts of the Skip framework.","source":"@site/docs/glossary.md","sourceDirName":".","slug":"/glossary","permalink":"/docs/glossary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Deploying a Skip service","permalink":"/docs/deploying"},"next":{"title":"@skipruntime/core","permalink":"/docs/api/api/"}}');var i=t(4848),r=t(8453);const a={},o="Glossary",c={},l=[];function d(e){const n={em:"em",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"glossary",children:"Glossary"})}),"\n",(0,i.jsx)(n.p,{children:"This page defines and briefly explains the terminology and main concepts of the Skip framework."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Skip"}),": An open-source framework that enables software developers to build and run reactive services and systems.\n",(0,i.jsx)(n.em,{children:"Skip"})," is an overarching term to refer to the full ecosystem of tools and components described here."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Skiplang"}),": The Skip programming language, used by ",(0,i.jsx)(n.em,{children:"SkipLabs"})," to implement the core logic and data structures underpinning the ",(0,i.jsx)(n.em,{children:"Skip"})," system."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"(Skip) Runtime"}),": A full-fledged reactive computation engine, implemented in Skiplang and made available via bindings in other languages.\nThe core components of the runtime are ",(0,i.jsx)(n.em,{children:"collections"})," and ",(0,i.jsx)(n.em,{children:"mappers"}),", which together form a graph of data and computation dependencies that the engine can use to efficiently maintain reactive computations as inputs and data are updated."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Service"}),": A single-host reactive service implemented using the Skip runtime.\nA service provides reactive ",(0,i.jsx)(n.em,{children:"resources"})," which can be accessed by clients or other reactive services, which specify parameters and are provided with reactively-updated data computed and maintained by the service.\nA service consists of some ",(0,i.jsx)(n.em,{children:"input collections"}),", metadata to access ",(0,i.jsx)(n.em,{children:"external services"})," (other Skip services and/or non-Skip HTTP endpoints) and a computation graph defining how to produce outputs from its inputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Resource"}),": The output of a Skip service is one or more ",(0,i.jsx)(n.em,{children:"resources"}),", which are updated and maintained reactively.\nRequests against resources can include parameters, and the corresponding results -- a ",(0,i.jsx)(n.em,{children:"resource instance"})," specific to that client and request parameters -- are computed/updated until the client disconnects or unsubscribes.\nNon-reactive requests can also be made, allowing legacy clients to query reactive services' resources."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Collection"}),": The core data structure over which reactive computations operate, collections associate ",(0,i.jsx)(n.em,{children:"keys"})," with one or more ",(0,i.jsx)(n.em,{children:"values"}),", both of which can be arbitrary JSON data.\nCollections can either be ",(0,i.jsx)(n.em,{children:"eager"}),", meaning they are always kept up-to-date, or ",(0,i.jsx)(n.em,{children:"lazy"}),", meaning that values are only computed and/or updated in response to queries for a particular key."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Mapper"}),": Mappers describe computations from keys/values in one collection to keys/values in another collection.\nThey form the ",(0,i.jsx)(n.em,{children:"edges"})," of the Skip reactive computation graph, specifying transformations and compositions of data to produce intermediate results and outputs.\nCrucially, they must be deterministic and side-effect free, so that the reactive runtime can re-execute them as needed to maintain results that are both up-to-date and guaranteed from-scratch consistent.\n(i.e. exactly the same as the result that would be computed if the equivalent non-reactive computation were executed from scratch on the current input)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"(Skip) Client"}),": A thin client for a Skip reactive service which does not itself use the Skip Runtime, but operates over data which is kept up-to-date by the service."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);