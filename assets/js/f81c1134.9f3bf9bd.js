"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"event-hidden-arch","metadata":{"permalink":"/blog/event-hidden-arch","source":"@site/blog/event_hidden_arch.md","title":"Event-Hidden Architectures","description":"Interactive features without events","date":"2025-04-21T00:00:00.000Z","tags":[],"readingTime":5.39,"hasTruncateMarker":true,"authors":[{"name":"Charles Zedlewski","title":"SkipLabs Advisor","url":"https://www.linkedin.com/in/charleszedlewski/","key":"charles","page":null}],"frontMatter":{"title":"Event-Hidden Architectures","description":"Interactive features without events","slug":"event-hidden-arch","date":"2025-04-21T00:00:00.000Z","authors":"charles"},"unlisted":false,"nextItem":{"title":"New built-in resources for Skip services","permalink":"/blog/non-reactive-dependencies"}},"content":"## Event-Hidden Architectures\\n\\n### How did we get here?\\n\\nOne of the most powerful and consistent trends in software for the past decade has been the move from single stack to cloud native applications.  Cloud native applications are inherently distributed and have become popular as developers are drawn to the convenience of containers and platform-as-a-service infrastructure.\\n\\nThe API-ification of important subsystems means today hardly anyone would consider implementing their own payments, shipping, SMS, chat, billing or shopping cart functionality.  Instead they\u2019ll lean on Stripe, Twilio, Shopify, Shippo, etc; accelerating time-to-value and further distributing the functions of the application.\\n\\nIn the last few years developers have moved quickly to incorporate more and diverse AI features into their applications, but AI models and application logic compute requirements are quite different from one another and therefore seldom run in the same stack, further distributing the application.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Example architecture diagram](./assets/event-hidden-arch-diagram.png)\\n\\nSome have called for a \u201cback to basics\u201d approach of a single stack or modular monolith, but given the list of external demands on modern application development, distributed is unlikely to go away.  Instead it\u2019s becoming a more common approach for application architectures, not less, especially for \u201csuccessful\u201d applications that need to modularize to support more customers, users and features.\\n\\n### 10 years of bad advice\\n\\nOne can sympathize with the desire for a \u201cback to basics\u201d approach to cloud-native applications.  There are many \u201cpros\u201d to writing cloud-native, distributed applications but living with them has been miserable for developers and operators alike.  \u201cCloud native\u201d is effectively synonymous with \u201cdistributed,\u201d and \u201cdistributed\u201d is another way to say a network is parked in the middle of the application.  This changes engineering and operations in many big and subtle ways.  The most common and questionable advice to tackle these challenges has been \u201cevent-driven.\u201d\\n\\n![Events everywhere buzz lightyear](./assets/event-hidden-arch-buzz.png)\\n\\nEvents are the biggest reason why engineering teams try to postpone distributed or microservice architectures for as long as possible.  \u201cCloud native\u201d and \u201cmicroservices\u201d have unwittingly become synonymous with \u201cevent-driven\u201d and sullied their reputations in the process.\\n\\nEvents remain a useful technical mechanism to transmit state and data among application resources but they are a miserable experience for developers and operators alike.  Events:\\n\\n- Put application state and data in dozens of queues that make the application prone to failures, race conditions and incorrect results\\n- Force developers to think and program asynchronously which is more complex and time consuming than synchronous code\\n- Require developers know more than just their portion of the code and application domain: they also need to understand how to work with queues, caches and event schemas\\n- Make applications difficult to troubleshoot as there is no one place to understand the state and data for an application\\n\\n![Revolution against API schemas](./assets/event-hidden-arch-revolution.png)\\n\\n###  ~~Event-driven~~ vs event-hidden\\n\\nThe event-driven approach *was* necessary in 2020 but it isn\u2019t any longer in 2025\\\\.  Today\u2019s modern abstractions ensure it\u2019s unnecessary to make a faustian bargain between the flexibility & scale of distributed and the existential dread inspired by event-driven architectures.\\n\\nThere are three innovations that together allow us to engineer applications as event-driven but where developers and operators are fully abstracted away from the events themselves.\\n\\n1. [React](https://react.dev/) paired with client state management frameworks like [Redux](https://redux.js.org/), [Xstate](https://xstate.js.org/) or [Zustand](https://zustand-demo.pmnd.rs/) create a simple, productive experience for frontend engineering.  Frontend engineers are able to implement simple, performant UI components that can support complex application behaviors while outsourcing state and DOM management to the framework.\\n\\n2. Durable execution systems like [Temporal](https://temporal.io/), [Restate](https://restate.dev/) and [DBOS](https://www.dbos.dev/) ensure distributed backend application writes are always correct within and across services and network boundaries because each function call is durable by default.  All of the convenient guarantees of an ACID transaction are injected into the everyday programming experience.\\n\\n3. Reactive frameworks for incremental computation like [Skip](https://github.com/SkipLabs/skip) make it simple to implement distributed application reads from multiple sources and latencies to disparate clients and views.  Developers can blend data from multiple REST and/or streaming sources but write their logic as simple map functions free from references to infrastructure or events.  Because the services are reactive, performance and correctness concerns like cache invalidations are outsourced to the framework.\\n\\nAll three technologies share many of the same design principles.  Each technology caters to a different area of the application (client changes, backend writes, backend reads) but they all:\\n\\n- Provide a declarative developer experiences free from references to infrastructure\\n- Are event-driven \u201cunder the covers\u201d but don\u2019t leak these details to users\\n- Work asynchronously, supporting high levels of concurrency but still make the developer experience feel effectively synchronous\\n- Manage and in some cases enforce immutability of functions and/or data\\n- Handle application state as a first class concern\\n- Allow for modularity and incremental adoption \\\\- they don\u2019t enforce \u201cone pure approach\u201d on an entire application\\n- Can run locally or globally\\n- Are open source\\n\\nCollectively, these frameworks provide a substantial upgrade to applications across developer experience, feature velocity, correctness, efficiency and operational reliability.  Software development returns to a simpler, low context model; developers do not need to learn the unique quirks of low level infrastructure or understand the overall application architecture just to build or enhance their part of the application.\\n\\n### New powers\\n\\nBurying events doesn\u2019t just simplify engineering, it grants engineers with new powers in the process.\\n\\n**Transparency**\\n\\nIronically, with event-hidden engineering, every behavior of the application is now more visible in an actionable way because events are held in lower layers of the stack that understand their semantics and context.\\n\\n**State Handling**\\n\\nEvents are not the only thing that get hidden.  By extension state handling, state changes and their implications for correctness are also buried in this new model.  The new developer experience is just implementing as if forever at \u201cinit time.\u201d  All the progressions to get from 1 init time state to a future init time state are handled by the platforms powering the event-hidden architecture.\\n\\n**Replayability**\\n\\nLastly, event-hidden architectures nearly always enable replayability.  Keeping events and state in a separate, well abstracted place makes it possible to give developers and operations teams a general way to time travel through the application\u2019s computation.\\n\\n### Conclusion\\n\\nIn 2025 it turns out you can go home again: you can build feature-rich, scaled, distributed applications without having to interact with events, queues and the industry of patterns, frameworks and consultants that came with them.\\n\\nEvent-hidden will become the default web app architecture for the next 10 years.\\n\\n![Next ten years](./assets/event-hidden-arch-next-ten-years.png)"},{"id":"non-reactive-dependencies","metadata":{"permalink":"/blog/non-reactive-dependencies","source":"@site/blog/adapters.md","title":"New built-in resources for Skip services","description":"How to make Postgres and Kafka-backed reactive services","date":"2025-04-14T00:00:00.000Z","tags":[],"readingTime":4.47,"hasTruncateMarker":true,"authors":[{"name":"Benno Stein","title":"Senior Engineer","url":"https://bennostein.org","key":"benno","page":null}],"frontMatter":{"title":"New built-in resources for Skip services","description":"How to make Postgres and Kafka-backed reactive services","slug":"non-reactive-dependencies","date":"2025-04-14T00:00:00.000Z","authors":"benno"},"unlisted":false,"prevItem":{"title":"Event-Hidden Architectures","permalink":"/blog/event-hidden-arch"},"nextItem":{"title":"SkipLabs Funding","permalink":"/blog/skiplabs-funding"}},"content":"The Skip framework is a system for building and running incremental backend services, simplifying the challenges of engineering complex reactive systems.\\n\\nWhile Skip reactive services compose naturally with *each other*, they must also coexist with other backend systems with non-reactive semantics and APIs.\\n\\nThis blog post describes some recent enhancements we\'ve made to the Skip framework to make it easy to bridge the reactive/non-reactive interface for popular systems like PostgreSQL and Kafka, and shows how you can build similar integrations with other systems and APIs.\\n\\n\x3c!--truncate--\x3e\\n\\n## Postgres\\n\\nPostgreSQL is one of the most popular relational databases in use today, serving as a highly scalable and resilient source-of-truth for critical application data.\\n\\nFor incremental computation, it can be tricky to maintain an up-to-date view of an application\'s state over a relational data model.\\nDifferent data sources add and modify values in an interconnected relational data model: you can either re-query and re-build the world periodically, or build some ad-hoc logic to propagate deltas.\\n\\nUsing Skip\'s [Postgres adapter](https://skiplabs.io/docs/api/adapters/postgres/classes/PostgresExternalService), developers can define some computation over their Postgres state and use the Skip framework to watch for changes in the relevant tables and recompute only the minimal affected outputs.\\n\\nTo use the Postgres addapter, when defining your Skip service, specify one (or more) databases in the `externalServices` field:\\n\\n```typescript\\nconst service = {\\n  initialData: ...,\\n  resources: ...,\\n  createGraph: ...,\\n  externalServices: {\\n    postgres: new PostgresExternalService({ host, port, database, ... }),\\n    ...,\\n  },\\n}\\n```\\n\\nThen, anywhere in that service, you can pull in a database table as a Skip collection by specifying a table name and a column to use as the key of the collection.\\nFor example, given a PostgreSQL table `my_table` with schema\\n\\n```sql\\nCREATE TABLE my_table (id SERIAL PRIMARY KEY, value TEXT);\\n```\\n\\nwe can use the table as a collection `myTable` in a Skip reactive service as follows.\\n\\n```typescript\\nconst myTable: EagerCollection<number, { id: number, value: string }> =\\n  context.useExternalResource({\\n    service: \\"postgres\\",\\n    identifier: \\"my_table\\",\\n    params: { key: { col: \\"id\\", type: \\"SERIAL\\" } },\\n  });\\n```\\n\\nUnder the hood, Skip will maintain this collection up-to-date by watching the database for changes to `my_table`; the collection `myTable` will update incrementally the same as any other Skip collection and can be used in reactive computations combining multiple tables or any other Skip collection.\\n\\nAlthough the `key` column specified here is the primary key column `id` of the table, it need not be a primary key or even unique -- it can be convenient to use a foreign key or other column to group multiple rows per key in the resulting Skip collection.\\n\\nA more-involved example of a reactive service with computations over several Postgres tables is available [here](https://github.com/SkipLabs/skip/tree/main/examples/hackernews).\\n\\n## Kafka\\n\\nApache [Kafka](https://kafka.apache.org) is another backend component with widespread adoption for high-throughput messaging and event streaming, often used to power real-time features.\\n\\nIntegrating a Kafka cluster with a Skip service is a natural way to build reactive logic on top of streaming data.\\nAs such, we provide an ExternalService [adapter](https://skiplabs.io/docs/api/adapters/kafka/classes/KafkaExternalService) which handles the plumbing for you and abstracts Kafka message streams as Skip collections.\\n\\nFirst, specify connection information and configuration in the `externalServices` field of your service:\\n\\n```typescript\\nconst service = {\\n  initialData: ...,\\n  resources: ...,\\n  createGraph: ...,\\n  externalServices: {\\n    kafka: new KafkaExternalService({ clientId, brokers, ... }),\\n    ...,\\n  },\\n}\\n```\\n\\nthen, consume messages into a reactive collection with a `usExternalResource` call, e.g.\\n\\n```typescript\\nconst myKafkaTopic: EagerCollection<string, string> =\\n  context.useExternalResource({\\n    service: \\"kafka\\",\\n    identifier: \\"my-kafka-topic\\",\\n    params: {},\\n  });\\n```\\n\\nBy default, messages are interpreted as their string key and value, but a \\"`messageProcessor`\\" can be provided to parse message payloads into other types, manipulate key structure, or pull in \\"topic\\" identifiers or other message metadata.\\n\\n\\n## Other external APIs\\n\\nOf course, there are many other technologies and systems and you may need to integrate those with Skip.\\nThe simplest option for many non-reactive APIs is to periodically poll an HTTP endpoint; we provide a simple interface to specify a polled dependency on a non-reactive API:\\n\\n```typescript\\nconst service = {\\n  initialData: ...\\n  resources: ...\\n  createGraph: ...\\n  externalServices: {\\n    myExternalService: new PolledExternalService({\\n      my_resource: {\\n        // HTTP endpoint\\n        url: \\"https://api.example.com/my_resource\\",\\n        // Polling interval, in milliseconds\\n        interval: 5000,\\n        // data processing into `Entry<K, V>[]` key/values structure\\n        conv: (data: Json) => Array.from(data, (v, k) => [k, [v]])\\n      }\\n    }),\\n  },\\n};\\n```\\n\\nThis [`PolledExternalService`](https://skiplabs.io/docs/api/helpers/classes/PolledExternalService) specifies a single endpoint polled every 5 seconds, but in general can include any number of endpoints with different polling intervals and converter/parser functions.\\n\\nOf course, polling necessarily introduces some latency in the reactive service: data can become stale between polls.\\nOn the other hand, increasing the request frequency can place undue load on the target non-reactive API.\\nAs such, care should be taken when setting up a polled dependency to choose a reasonable interval, and where possible polling should be avoided in favor of genuinely reactive updates.\\n\\n\\n## What\'s next?\\n\\nThese three adapters ([`PostgresExternalService`](https://skiplabs.io/docs/api/adapters/postgres/classes/PostgresExternalService), [`KafkaExternalService`](https://skiplabs.io/docs/api/adapters/kafka/classes/KafkaExternalService), and [`PolledExternalService`](https://skiplabs.io/docs/api/helpers/classes/PolledExternalService)) are provided to make it easy to integrate with common backend systems, but all three are built using only public APIs and can easily be extended or tweaked in user code.\\n\\nIf your application would benefit from additional adapters for other components and technologies, you can implement an [`ExternalService`](https://skiplabs.io/docs/api/core/interfaces/ExternalService) to wrap non-reactive systems as inputs to your Skip service.\\n\\nWe welcome and support open-source contributions and feature requests and are always happy to answer questions or help out on Discord."},{"id":"skiplabs-funding","metadata":{"permalink":"/blog/skiplabs-funding","source":"@site/blog/skiplabs_funding.md","title":"SkipLabs Funding","description":"SkipLabs raises $8M in seed funding","date":"2025-03-25T00:00:00.000Z","tags":[],"readingTime":2.435,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"SkipLabs Funding","description":"SkipLabs raises $8M in seed funding","slug":"skiplabs-funding","date":"2025-03-25T00:00:00.000Z","authors":"jverlaguet"},"unlisted":false,"prevItem":{"title":"New built-in resources for Skip services","permalink":"/blog/non-reactive-dependencies"},"nextItem":{"title":"Why Skip?","permalink":"/blog/why-skip"}},"content":"**The News**\\n\\nWe\u2019re pleased to announce that SkipLabs has raised $8 million to bring incremental computing to applications everywhere.  We intend to use the entirety of this funding to enhance the open source Skip project and grow the developer community.\\n\\nThis financing also means we get to work with [Lenny Pruss](https://www.linkedin.com/in/lennypruss/) at Amplify Partners who have invested in some of today\u2019s most prominent developer platforms such as dbt Labs, Prisma and Temporal to name a few and [Alex Mackenzie](https://www.linkedin.com/in/alex-mackenzie-6aa80ab4/) at Tapestry VC.  Check out Amplify\u2019s [blog post](https://www.amplifypartners.com/blog-posts/how-skiplabs-is-building-react-for-the-backend) that shares their view on SkipLabs and the future of reactive systems and Tapestry\u2019s [blog post](https://www.tapestry.vc/perspectives/skiplabs-streaming-without-the-streams) on why they chose to invest.\\n\\nWe are also humbled to earn the support of individual investors like Adam Gross, Spencer Kimball, Yann LeCun, Tom Occhino, Olivier Pomel and Nicolas Vasilache.\\n\\n{/* truncate */}\\n\\n**2025 so far\u2026**\\n\\nWe launched Skip at the start of this year and are very happy with the reception we\u2019ve received so far.  In the first two months since its alpha release, the Skip project has received more than 1,000 stars on github, more than 1,000 unique installations while our Discord community grew by 400%.\\n\\nWhat has been most gratifying are the discussions working with users to apply Skip and incremental computing to making their backend applications fast, secure and easy to enhance.  Developers have used Skip to power real-time crypto trading applications, CRM content management systems and sports tournament management.\\n\\nWe look forward to hundreds more of these collaborations because the opportunity for incremental computing is everywhere, it just wasn\u2019t easy enough to do before Skip.  Thanks to Skip, incremental computing will become the simplest way of building services that:\\n\\n- Power real-time features\\n- Source data from more than one place with more than one latency\\n- Serve distinct views to diverse clients that are a combination of browser, mobile, agent and API\\n- Move security and privacy implementations from the client to the server\\n\\n**The Road Ahead**\\n\\nThe Skip Framework is new, but it\u2019s built on very mature technical foundations developed while we were at Meta.  We plan to incorporate feedback from the community for a few months more before we ship a beta release so we can be confident in our backward compatibility commitments.\\n\\nIn the meantime we have lots of exciting new features to ship.  In the past few weeks we\u2019ve already added prebuilt external resources for Postgres and Kafka, a more efficient natively compiled runtime and native OAuth support.\\n\\nIn the months ahead we plan to add:\\n\\n- Horizontal autoscaling\\n- A built-in debugger that builds on Skip\u2019s transactional heap to provide unprecedented visibility at runtime\\n- Support for additional backend programming languages\\n\\n\\n**Thank You**\\n\\nOur deepest gratitude to our users, investors, advisors and early employees who have believed in and supported SkipLabs\u2019 mission of incremental computing since the earliest days.  We\u2019ll keep shipping and proving you were right all along.  Back to work!"},{"id":"why-skip","metadata":{"permalink":"/blog/why-skip","source":"@site/blog/why_skip.md","title":"Why Skip?","description":"Why use the Skip framework?","date":"2025-02-11T12:00:01.000Z","tags":[],"readingTime":6.335,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Why Skip?","description":"Why use the Skip framework?","slug":"why-skip","date":"2025-02-11T12:00:01.000Z","authors":"jverlaguet"},"unlisted":false,"prevItem":{"title":"SkipLabs Funding","permalink":"/blog/skiplabs-funding"},"nextItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"**Skip After Meta**\\n\\nFacebook allowed us to open source both Hack and Skiplang so we could share both with the larger engineering community.  I eventually decided to leave Facebook (now Meta) to build on the work of Hack and Skiplang and develop technologies that would address the same challenges we had at Facebook but for engineers generally.  To do this, SkipLabs needed to incorporate two new technologies to make the work we did at Facebook usable in a normal engineering context.\\n\\n{/* truncate */}\\n\\n1. A way to manage objects transactionally as their state changes\\n\\nThis is an essential and unique design choice in Skip\u2019s approach to incremental computation.  Without it, developers have to program against streams and assume a large and insidiously subtle amount of complexity.  Incremental computation will only become mainstream if the dev and ops time experience is simpler and easier than the more common request/response paradigm, not just faster & continuous.\\n\\nObject handling needed to go beyond simple caching.  We needed an in-memory system of objects and collections that could maintain an up-to-date view of the data as it changed which we call \\\\*\\\\*reactive collections\\\\*\\\\*.\\n\\nMost of the objects in a program can be managed with memoization: storing and reusing the results of expensive computations.  This can be fast, simple and efficient provided you know when to evict the memoized values.\\n\\nIn Skip, memoized objects are held in \u201cLazy Collections.\u201d They compute and cache results only when needed clients and will automatically evict data from the cache to save memory.\\n\\nOther objects serve as indices or dictionaries. These objects realistically cannot be memoized as every value in the dictionary needs to be up to date at all times.  Skip manages these objects as \u201cEager Collections,\u201d keeping them in memory at all times and recomputing whenever a source updates.\\n\\n![Skip runtime internals diagram](./assets/why_skip_runtime_diagram.png)\\n\\n2. An ability to program services that compute incrementally but in familiar languages.\\n\\nSkiplang was built from the ground up to support incremental computing and it\u2019s very well suited to that purpose.  Realistically engineering teams outside of Meta have already picked their languages and stacks and it would be unrealistic to expect everyone to change to meet Skip.\\n\\nWe realized we could bring the most essential characteristics of Skiplang to already widely used languages, starting with TypeScript.  Skip aims to allow developers to implement programs declaratively while the framework automatically manages the state and decides what parts of the graph of computation need to be re-run.  For this to work, programs need to be deterministic, effect free and assume they are interacting with objects in a transactional heap.\\n\\n![Skip runtime application stack](./assets/why_skip_stack_diagram.png)\\n\\nThe Skip Runtime integrates with popular Typescript runtimes (e.g. Node, Bun) and using proxy objects gives Typescript a reactive, transactional heap.  We then added a Typescript API that gives developers a simple programming model of map functions applied to the objects Skip is now holding in its transactional heap.  In this way, developers get to stick with their preferred language while Skip can transparently manage both the state of the objects and directs when different parts of a program are recomputed.\\n\\nWe added higher level features to the API to more easily manipulate those collections (filter, slice, join, etc ...), and added support for sub-collections (collections created while computing the entry of a collection), among other things.  In the future we think there\u2019s an opportunity to add other (optional) higher level primitives to make building complex services even easier.\\n\\nToday the Skip Framework exclusively supports TypeScript.  We plan to add support for Python and Java in the near future and other languages in the medium term.\\n\\n**The Skip Framework**\\n\\nBy combining a programming model that enforced effect-free operations on immutable objects with a runtime that abstracted away state and data management details, Skip has grown from a language to a full framework that we\u2019ve recently released.\\n\\n**Why Skip is useful**\\n\\nSkip can power services that perform any combination of reads and writes but the main benefits are experienced with reads.  Skip gives read-based features & functions several advantages over the more typical request/response model.\\n\\nSkip programs will:\\n\\nContinuously react to changes in data and clients \\\\- by managing the state of objects and the impact of functions on those objects, Skip services can incrementally recompute and stream new values to clients without recomputing unchanged values unnecessarily.\\n\\nAutomatically manage their own state \\\\- a feature may need to fetch data from multiple sources, compute intermediate results in a specific order while hydrating & invalidating different caches.  In Skip all of this complexity is handled by the framework.  Developers just write functions against collections for a single point in time.\\n\\nLet you introspect their execution \\\\- reactive programs are historically challenging to inspect and debug.  Because the Skip runtime manages both the objects and their graph of computation, Skip programs are very easy to introspect.  We plan to add a debugger to the framework to capitalize on this part of the design.\\n\\nWork alongside traditional request / response programs \\\\- Unlike past approaches to state management and reactivity, we wanted to make sure Skip was not an \u201call or nothing\u201d engineering decision.  Vertically, Skip can run in one or several layers of an existing software stack. It can read and write data from preexisting REST services, streaming sources or some legacy backend.  Skip can also power a new service where it reads and writes from a traditional database.\\n\\nHorizontally, Skip can power some or all the features of an application\u2019s backend and coexists with other business logic written in other frameworks, languages, etc.  Within Skip\u2019s context it\'s very easy to extend what you\u2019ve implemented in a service through a feature called \u201cmirroring\u201d that lets a new service import and synchronize data from a pre-existing peer service.\\n\\n**Why it feels awesome to use Skip**\\n\\nSkip lets developers focus on the \\"what\\" instead of the \\"how.\\" By defining the desired outcome declaratively, Skip generates the necessary logic to keep data live and reactive. It handles complexities like cache invalidation and recomputation efficiently without adding any cognitive burden for the developer.\\n\\nWe took a graph-based approach to the Skip programming model. You define your computation as a series of operations on collections, creating a \\\\*\\\\*graph of reactive computations\\\\*\\\\*. Each node in the graph can be a lazy or eager collection, and the framework automatically manages dependencies, updates, and cache invalidation for you.\\n\\nHere\u2019s the magic: You write your program as if \\\\*\\\\*time is frozen\\\\*\\\\*, defining static outputs in terms of static inputs.  Skip then turns this into a live, streaming system. If an input changes, the framework efficiently propagates updates to the affected parts of the graph, ensuring everything stays consistent. It even supports transactional updates, so you can modify multiple inputs simultaneously without breaking consistency.\\n\\nThis approach not only makes building incremental features easier but also scales better as the system grows. By focusing on what you want to build and letting Skip handle the rest, developers can deliver live, interactive features without the typical headaches.\\n\\n**Why Skip matters**\\n\\nSkip isn\u2019t just about solving caching or problems of incremental computation, it\u2019s about rethinking how we build systems that deal with constantly changing data. By giving developers tools to handle immutability, caching, and reactivity seamlessly, Skip makes it easier to write reliable, efficient, fast and scalable applications.\\n\\nBy combining the lessons learned from Facebook\u2019s early challenges with the innovation of Skip, we\u2019ve charted a path toward solving some of the most complex problems in real-time and reactive systems. This is just the beginning, and we\u2019re excited to see where this journey takes us next."},{"id":"skips-origins","metadata":{"permalink":"/blog/skips-origins","source":"@site/blog/skips_origins.md","title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","date":"2025-02-11T12:00:00.000Z","tags":[],"readingTime":4.495,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","slug":"skips-origins","date":"2025-02-11T12:00:00.000Z","authors":"jverlaguet"},"unlisted":false,"prevItem":{"title":"Why Skip?","permalink":"/blog/why-skip"},"nextItem":{"title":"Skip alpha","permalink":"/blog/skip-alpha"}},"content":"**Coping with success**\\n\\nI joined a much-smaller-than-today\u2019s Facebook in 2011 to work on what would eventually become the developer tools team. At the time I joined, the engineering team was in the hundreds and the tools we had for development were, well, not great. PHP was the backbone of almost everything, with millions of lines of code. JavaScript was secondary, and only a few critical services ran on other languages. The company was scaling rapidly, and our development practices weren\u2019t keeping up.\\n\\nAs the codebase grew, so did the difficulty of maintaining and improving it.  Facebook became much more feature rich and simple enhancements became complicated and error prone.  Often new features needed to operate conditionally on how other preexisting features were already operating.  Essentially with each new layer of features teams added, state management became a greater concern.\\n\\n{/* truncate */}\\n\\n**Power of type systems**\\n\\nFacebook\u2019s codebase relied heavily on dynamic constructs called \u201cgatekeepers\u201d that determined which features were live for which users under different conditions. But these gatekeepers could change which code paths were executed in ways that weren\u2019t always obvious during development.\\n\\nThe inability to recreate the state of a path made testing and refactoring a nightmare. Imagine this: you tweak a method, and three weeks later, you\u2019re woken up at 3 AM because your change broke something deep in the application. Over time developers stopped touching critical parts of the codebase. Instead of refactoring and improving existing code, they\u2019d build parallel versions\u2014hacks on top of hacks. The technical debt was piling up, and we needed a way to make changes safely and confidently.\\n\\nWe believed we could use types to make deeper static analysis and automatic refactoring possible in the PHP language and this would help engineers bring some order to the chaos.  The system was called Hack. Adoption wasn\u2019t immediate\u2014there was some resistance\u2014but over time, developers saw the value. We intentionally designed the type system to be more flexible than strictly \u201ccorrect.\u201d This decision allowed us to cover more of the codebase quickly, even if it meant making some trade-offs in precision. It worked. Hack became the default way to write PHP at Facebook, and it\u2019s still in use today.\\n\\n**Incrementality**\\n\\nAs Facebook applications grew denser and more layered, more teams were looking to add real-time features where users\u2019 actions immediately impact others, like clicking a \\"Like\\" button and instantly updating the count across everyone\u2019s apps.  Such features are essential because performance and interactivity grew user engagement. When an application feels fresh and interactive, it\u2019s much more appealing than static content. However, implementing this in a scalable way is not straightforward.\\n\\nA typical scenario: you fetch a Facebook post. Normally, the server retrieves data like the post\u2019s text, the number of likes, and the comments. It applies rules to filter and prioritize what\u2019s shown (e.g., highlighting the most relevant comments or enforcing privacy settings). This logic runs once and produces a static result\u2014the post you see on your screen.\\n\\n![Non-reactive request flow](./assets/skips_origins_nonreactive_flow.png)\\n\\nMaking this \\"live\\" means the post updates automatically. If someone likes it, the count changes instantly. If a comment gets edited or deleted, it reflects for everyone in real time. Achieving this requires \\"inverting the arrow.\\"  Traditionally, a user\u2019s actions\u2014like adding a comment\u2014 produces a write to the database. To make things reactive, engineers needed to turn these writes into continuous streams of updates. For example:\\n\\n1\\\\. **User likes a post** \u2192 Create a stream of updates for that post\u2019s like count.\\n2\\\\. **User adds a comment** \u2192 Create a stream for the comments section.\\n\\n![Reactive request flow](./assets/skips_origins_reactive_flow.png)\\n\\nTypically reactive frameworks compose these streams into live updates. While conceptually straightforward, this approach fell short because:\\n\\n**Excessive recomputations**: Each small change could require recalculating the entire post, which is expensive and inefficient.\\n\\n**Caching problems**: To compute incrementally but avoid excessive fetching and recomputation, you need caches. But managing caches as objects are mutated becomes a nightmare\u2014how do you ensure they\u2019re up-to-date without introducing inconsistencies?\\n\\nCaches can work well for \\"hot\\" data\u2014frequently accessed data with a short lifespan. But outside this narrow use case, caching comes with trade-offs:\\n\\n1\\\\. **Long TTL (Time-to-Live)**: Keeps data in the cache longer, but risks showing stale or inconsistent data.\\n2\\\\. **Manual Invalidation**: Requires custom logic to invalidate caches when data changes. This is extremely error-prone and hard to maintain.\\n\\nFor large-scale systems like Facebook, neither approach was sustainable. We needed a better solution.\\n\\nWe created Skiplang to better serve our needs for better state management and real-time features & services.  We believed we could use our experience developing type systems to flip the way we think about reactive systems. Instead of starting with database writes and building logic from there, Skiplang let you:\\n\\n1\\\\. **Define the Desired Output**: Begin with what you want to build (e.g. a Facebook post).\\n2\\\\. **Use Declarative Rules**: Specify what data is needed and how it\u2019s combined.\\n\\nSkiplang was originally designed to handle incremental computation and caching, but its capabilities quickly expanded to address the needs of reactive features and efficient data handling.  We built Skiplang on the premise that **cached objects were immutable** \\\\- unchangeable once created. If we could guarantee that immutability, it would be easier to use static analysis of Skiplang\u2019s typed language to track dependencies and know exactly when to invalidate the cache and where to recompute.  Traditional programming languages didn\u2019t give us the tools to enforce these guarantees."},{"id":"skip-alpha","metadata":{"permalink":"/blog/skip-alpha","source":"@site/blog/skip_alpha.md","title":"Skip alpha","description":"Announce the alpha release of Skip","date":"2024-12-24T00:00:00.000Z","tags":[],"readingTime":0.645,"hasTruncateMarker":true,"authors":[{"name":"SkipLabs Team","key":"skiplabsteam","page":null}],"frontMatter":{"title":"Skip alpha","description":"Announce the alpha release of Skip","slug":"skip-alpha","date":"2024-12-24T00:00:00.000Z","authors":"skiplabsteam"},"unlisted":false,"prevItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"We\u2019re pleased to share the alpha release of the [Skip Framework](https://github.com/SkipLabs/skip), an open source (MIT license) system for building and running reactive backend services.\\n\\nSkip gives Typescript developers a simple declarative way to implement and run read-mostly features and services that are performant, transparent and continuously updated.\\nThe framework handles all the complexities of state management, integrations and failure handling in the process.\\n\\n{/* truncate */}\\n\\nYou can install via:\\n\\n```\\nnpm i @skiplabs/skip\\n```\\n\\nThis is an alpha release \\\\- we are happy with its stability and functionality but are looking forward to feedback on the interfaces and developer experience.\\n\\nIf you have time to check it out over the holidays and have feedback or just questions, [come talk to us in discord](https://discord.gg/4dMEBA46mE).\\n\\nHappy holidays,\\n\\nThe SkipLabs team"}]}}')}}]);