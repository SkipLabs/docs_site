"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"interview_lucas","metadata":{"permalink":"/blog/interview_lucas","source":"@site/blog/interview_lucas.md","title":"Discussion with Lucas, a SkipLabs engineer","description":"An in-depth conversation with a SkipLabs engineer about reactive programming, performance optimization, and the technical challenges of building scalable data synchronization tools.","date":"2025-07-11T00:00:00.000Z","tags":[],"readingTime":7.965,"hasTruncateMarker":false,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Discussion with Lucas, a SkipLabs engineer","description":"An in-depth conversation with a SkipLabs engineer about reactive programming, performance optimization, and the technical challenges of building scalable data synchronization tools.","slug":"interview_lucas","date":"2025-07-11T00:00:00.000Z","authors":"hubyrod"},"unlisted":false,"nextItem":{"title":"Cache Invalidation and Reactive Systems","permalink":"/blog/cache_invalidation"}},"content":"Ever wondered what it\'s like to work on cutting-edge reactive programming? This chat with a Lucas, a SkipLabs engineer, gives you the inside scoop on building tools that tackle gnarly data synchronization problems. We have created something called the Skip Framework, which runs on our own programming language, SkipLang, pretty cool stuff. What makes this interview particularly interesting is how it bounces between the nuts and bolts of performance testing (like figuring out why stream creation was too slow) and the bigger picture of where tech is headed. You\'ll get a feel for SkipLabs\' laid-back engineering culture where people work independently but always have each other\'s backs, plus some thoughtful takes on everything from open source development to why we still edit code like it\'s 1995. Whether you\'re into the technical weeds of load testing or curious about how small teams tackle ambitious projects, there\'s something here for you.\\n\\n{/* trunctate */}\\n\\n## How long have you been working at SkipLabs?\\n\\nI joined SkipLabs in November 2022, so it\'s been a little over two and a half years now.\\n\\n## In a few words, what do you do at SkipLabs?\\n\\nAt SkipLabs, we develop tools focused on reactive programming. Our goal is to solve complex data synchronization problems while making this approach accessible and cost-effective in terms of infrastructure.\\n\\nIn practical terms, reactive programming is a declarative way of expressing computations: instead of manually handling state transitions, you simply describe state as a function of multiple inputs.\\n\\nTo make this approach tangible and usable on a daily basis, we created the Skip Framework\u2014a reactive programming framework designed to be both powerful and easy to adopt.\\n\\n## How would you describe the engineering culture at SkipLabs?\\n\\nI\u2019d say the engineering culture at SkipLabs is built first and foremost on trust and individual responsibility. Everyone pulls their weight and doesn\u2019t hesitate to get their hands dirty when needed\u2014even with tasks that may be a bit thankless. There\u2019s a real collective drive to move things forward, and it shows in the general vibe: everyone is experienced, which allows us to work in parallel in a smooth and efficient way.\\n\\nWe operate in a fairly open and independent manner, with very few meetings. And despite this autonomy, there\u2019s a lot of mutual support\u2014whenever a question arises, someone is always there to help. Our expertise is quite diverse, which is a real strength. Several people on the team have a strong background in programming languages and a deep interest in low-level systems\u2014especially compilers and LLVM, which sit at the heart of our stack.\\n\\nOn the tech side, the Skip Framework is currently exposed via a TypeScript API, and soon also via a native API in SkipLang. At the core of it all is a programming language, SkipLang, designed by Julien (previously at Facebook). The language was built to provide strong guarantees about data mutability\u2014making it clear what can and cannot change, to enable safe and efficient cache invalidation.\\nWe use this language today. It has its own compiler, written in SkipLang itself, which targets LLVM as a backend. This gives us strong performance while maintaining high portability: the framework can be compiled natively or to WebAssembly, which makes it possible, for example, to run it directly in a browser. In addition to SkipLang and TypeScript, we also use some Python and Bash\u2014classic tools to keep everything running smoothly.\\n\\n## So how do you approach scalability challenges?\\n\\nFor me, scalability starts with the ability to accurately measure performance. Before even thinking about optimization, you need reliable metrics\u2014and ideally, with minimal manual intervention. Manual handling quickly becomes a source of errors, especially in systems as complex as ours.\\n\\nIt\u2019s crucial to measure what you actually want to observe\u2014not just loosely correlated metrics. Once you have a solid measurement foundation, you can start large-scale analysis, deep profiling, pinpoint real bottlenecks, and invest where it really matters. Right now, we\u2019re specifically working on load testing Skip to better understand how our system behaves under different loads, and to validate our horizontal scalability. It\u2019s a progressive process, but essential to ensuring strong performance in varied environments.\\n\\n## And in your latest tests, what were the main bottlenecks you identified?\\n\\nOne of the first bottlenecks we found was in the creation of streams. Once a stream is set up, performance is excellent, even with multiple users subscribing in parallel. But the initial creation phase can be a bit too slow. We\u2019re currently working on a fix to improve that.\\n\\nThis kind of issue really shows how important fine-grained, automated tracing is\u2014to avoid local changes negatively affecting other parts of the system. Working as a team also means writing code that helps\u2014or at least doesn\u2019t hinder\u2014others\u2019 work. This is why we\u2019re implementing recurring load tests that run automatically in our CI. The goal is to detect performance regressions early and make sure different optimizations continue to work well together, even as the codebase evolves.\\n\\n## And in those load tests, what metrics do you prioritize?\\n\\nThere are several, but the most important is: how many users can we serve under acceptable conditions for a given budget? We aim to stay close to real-world use cases. Depending on the services being tested, some loads involve heavy writing, others are mostly read-heavy. Some may involve lots of shared data, others significant server-side computation before results are pushed out.\\n\\nOne key metric is replication time: when a client writes data, how long does it take for that data to be visible to all other affected clients? This delay depends on the associated computation graph, so it can vary a lot\u2014but it\u2019s an essential metric for us.\\nOnce we\u2019ve defined what counts as an acceptable client-side response time, we check how many clients we can serve with a single instance. Then we measure how that capacity scales when adding more servers\u2014that\u2019s our horizontal scalability curve.\\n\\n## And on the server side, what do you measure?\\n\\nThere, we focus on how well we\u2019re using available resources. For example: how many server instances can we run efficiently on a given machine? Are we fully utilizing RAM, CPU cores? There\u2019s no point in paying for unused capacity. We complement that with regular profiling to ensure there are no avoidable bottlenecks in our server stack. It\u2019s an ongoing effort, but it gives us real visibility into the system\u2019s actual performance.\\n\\n## Beyond technical challenges, what do you see as the bigger issues in this field?\\n\\nI see three fundamental challenges:\\n\\n- **Correctness** \u2013 We want clients to receive data that is both fresh and accurate, with mathematical guarantees that what they see is consistent with the system\u2019s state. That\u2019s non-negotiable.\\n\\n- **Performance** \u2013 All of that has to happen as fast as possible, even at large scale. Offering low-latency reactivity is a bold promise\u2014and a serious technical challenge.\\n\\n- **Developer ergonomics** \u2013 This is often underestimated but just as crucial. Our goal is for developers to express business logic as declaratively and clearly as possible. Ideally, they focus only on what they want to produce, not how data will sync or update. It\u2019s our job to ensure that works smoothly behind the scenes.\\n\\nTo achieve this, we need a sound and efficient computation model, solid implementation, and a clean codebase. That\u2019s what we\u2019re building with Skip: a technical foundation that lets you offload complexity without compromising rigor.\\n\\n## What do you enjoy most about your work right now?\\n\\nBenchmarking itself isn\u2019t necessarily what excites me most\u2014but right now it\u2019s pretty thrilling, because we\u2019re entering a new phase of the project. After months of prototyping and refining the core of the framework, we\u2019re finally putting it through real-world load testing. Now we can truly measure how far this new paradigm can go under real conditions. It\u2019s gratifying to see that what we\u2019ve built\u2014brick by brick\u2014is starting to hold up at scale, and that the choices we\u2019ve made are beginning to pay off.\\n\\n## Taking a step back, what would you like to see evolve in computing today?\\n\\nThere are quite a few things I\u2019d like to see change, but if I had to summarize, I\u2019d highlight three key areas that matter most to me:\\n\\n### Valuing open source as a shared public good:\\n\\nI believe open source\u2014or more broadly, digital commons\u2014are still vastly underdeveloped relative to their importance. These are software foundations that benefit everyone and deserve more collective investment.\\n\\nAt SkipLabs, we work in open source under MIT license, and that\u2019s one of the reasons I joined the team.\\n\\n### Rethinking how we interact with code:\\n\\nToday, as developers, our interaction with code is still quite \u201cprimitive\u201d: we\u2019re just editing letters on a page. Even though modern editors add powerful features, it\u2019s still largely syntax-level work.\\nI\u2019d like us to move toward tools that support semantic interaction with code\u2014like version control that understands the intent behind a change, not just a diff of characters. That would unlock deeper collaboration, better understanding, and smarter analysis tools. It\u2019s a major area for innovation.\\n\\n### Mainstreaming cryptography in the digital public sphere:\\n\\nI think we should make broader use of asymmetric cryptography for things involving public speech, traceability, or authorship\u2014without necessarily resorting to blockchain. Digital signatures alone are enough in many cases.\\n\\nRight now, these tools are still largely inaccessible to the general public, which is a real problem. I think it\u2019s crucial to defend a web architecture that respects individual freedoms\u2014and that includes broad adoption of tools like encrypted email, and digital signatures, ideally within an open-source ecosystem.\\n\\n## Thanks, Lucas\\nThanks to you !"},{"id":"cache_invalidation","metadata":{"permalink":"/blog/cache_invalidation","source":"@site/blog/cache_invalidation.md","title":"Cache Invalidation and Reactive Systems","description":"A technical blog post examining cache invalidation challenges in distributed systems and presenting SkipLabs\' reactive backend approach as an alternative to traditional strategies.","date":"2025-07-04T00:00:00.000Z","tags":[],"readingTime":6.06,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Cache Invalidation and Reactive Systems","description":"A technical blog post examining cache invalidation challenges in distributed systems and presenting SkipLabs\' reactive backend approach as an alternative to traditional strategies.","slug":"cache_invalidation","date":"2025-07-04T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Discussion with Lucas, a SkipLabs engineer","permalink":"/blog/interview_lucas"},"nextItem":{"title":"Backend Pressure from a Reactive Point of View","permalink":"/blog/backend_pressure"}},"content":"Phil Karlton famously said *there are only two hard things in computer science: cache invalidation and naming things*. While naming things may be subjective, [cache invalidation](https://en.wikipedia.org/wiki/Cache_invalidation) is a problem that only gets harder as our systems grow more complex. As applications scale and users expect real-time data everywhere, traditional approaches to cache management crack under pressure.\\n\\nHere\'s the thing about cache invalidation: it sits right at the center of the classic performance versus consistency trade-off. Mess it up, and your users are stuck looking at stale data. Maybe they see yesterday\'s stock prices, or worse, they\'re making business decisions based on outdated metrics. But nail the consistency part while implementing it poorly, and you\'ve just thrown away all the performance benefits that made you add caching in the first place. This fundamental tension has been driving innovation in caching strategies for decades, from simple [Time-to-live (TTL)](https://en.wikipedia.org/wiki/Time_to_live) expiration to increasingly complex dependency tracking systems.\\n\\n{/* truncate */}\\n\\n## The Infrastructure Caching Challenge\\n\\nModern applications cache everywhere, from [CPU L1/L2 caches](https://en.wikipedia.org/wiki/CPU_cache) to [CDN edge caches](https://en.wikipedia.org/wiki/Content_delivery_network) to application-level query caches, and each layer brings its own invalidation headaches that get exponentially worse across distributed systems. You\'ve probably dealt with the classic cache invalidation strategies, and you know they all suck in their own special ways: TTL forces you to choose between stale data and cache misses, manual invalidation becomes impossible to maintain as dependencies grow, and event-driven invalidation couples your business logic to caching infrastructure.\\n\\n![TTL Caching: When Stale Data Breaks User Experience](./assets/ttl_cache.png)\\n\\nThen there\'s the distributed systems reality check. [Network partitions](https://en.wikipedia.org/wiki/Network_partition) happen, clocks drift, and eventual consistency models mean that even your best-designed invalidation strategies can fail spectacularly. Your invalidation message gets delayed, lost, or arrives out of order, and suddenly half your cache nodes are serving stale data while the other half got the memo. These edge cases are the worst: they\'re nearly impossible to test properly and usually only surface when you\'re already under production load.\\n\\nIf you\'re running database-backed applications, you\'re dealing with multiple cache layers between your data store and your users. A single database update might need to invalidate entries in [Redis](https://en.wikipedia.org/wiki/Redis), [Memcached](https://en.wikipedia.org/wiki/Memcached), your application\'s memory cache, and your CDN caches. Coordinating this invalidation across all these different systems while maintaining performance and consistency? That\'s the kind of engineering challenge that makes you question your career choices.\\n\\nOk, I may be a little dramatic here, but now that we agree on the problem we\'re talking about...\\n\\n## SkipLabs: A Reactive Approach to Cache Invalidation\\n\\nAt [SkipLabs](https://skiplabs.io/), we take a different approach to the cache invalidation problem through reactive backend architecture. Instead of treating caching as a separate concern requiring manual coordination, SkipLabs builds reactivity right into the core of your data processing pipeline. When your underlying data changes, all dependent computations and cached results automatically update in a cascading fashion.\\n\\nThe reactive model that SkipLabs uses draws from functional reactive programming and incremental computation research. When data changes, the system automatically figures out which computations depend on that data and updates them incrementally. You don\'t need manual cache invalidation because the *cache* is always in sync with the underlying data through the reactive dependency graph.\\n\\n![Automatic Cache Updates with SkipLabs](./assets/reactive_cache_skip.png)\\n\\nSkipLabs pulls this off through a sophisticated runtime that tracks fine-grained dependencies between data and computations. Unlike traditional caching systems where invalidation is something you bolt on afterward, the SkipLabs runtime makes invalidation an intrinsic part of how computation works. When data changes, the runtime precisely identifies which cached computations are affected and updates them incrementally.\\n\\nThe platform handles the complex scenarios that make traditional caching systems cry: joins across multiple data sources, aggregations over massive datasets, deeply nested dependency chains. By modeling these relationships explicitly, SkipLabs can provide strong consistency guarantees while keeping the performance benefits of caching.\\n\\n## Pros and Cons of the Reactive Approach\\n\\nThe reactive approach has some compelling advantages. First, you can finally stop writing manual invalidation logic. No more tracking complex dependency relationships or trying to remember which cache keys to invalidate when data changes. Your codebase becomes more maintainable, and you\'ll have fewer bugs related to stale data keeping you up at night.\\n\\nPerformance can be significantly better than traditional caching in many scenarios. Because the system understands your dependency graph, it can perform minimal incremental updates rather than nuking entire cache regions. For applications with complex data relationships, this means much more efficient cache utilization and faster response times when data changes.\\n\\nThe consistency guarantees are typically stronger than what you get with eventually consistent caching systems. Updates propagate automatically through the dependency graph, so there\'s less risk of serving stale data or having different parts of your application showing inconsistent views.\\n\\nBut let\'s be real about the trade-offs. The complexity doesn\'t disappear, it just moves from your application code into the runtime system. This can make debugging and performance tuning more challenging when things go wrong. You need to understand the reactive model and how your code will execute within it, which represents a significant learning curve for you and your team.\\n\\nConverting existing code to the Skip runtime without properly structuring and decomposing its dependency structure can incur more resource overhead than it saves through incrementality. The benefits of reactive systems shine when computations are well-structured for incremental updates, but poorly designed dependency graphs can actually hurt performance compared to simpler caching strategies.\\n\\nThe reactive model also puts constraints on how you can structure your applications and access data. Not every existing codebase can be easily adapted to work within a reactive framework, you might need significant architectural changes to realize the benefits. To me, this is the hardest problem to solve.\\n\\n## Wrap-up\\n\\nCache invalidation continues to be one of the most challenging problems in software engineering, with traditional approaches forcing difficult trade-offs between performance, consistency, and complexity. The reactive approach that platforms like SkipLabs are pioneering offers a promising alternative that could fundamentally change how we think about caching and data consistency.\\n\\nReactive systems aren\'t a silver bullet, they come with their own complexities and trade-offs. But they represent an important evolution in how we build data-intensive applications. As the technology matures and developer tooling improves, reactive backends may become viable for a much broader range of applications.\\n\\nThe key insight is that cache invalidation isn\'t just a technical problem to solve, it\'s a fundamental design challenge that shapes how we architect our systems. Whether you\'re using traditional invalidation strategies or exploring reactive approaches like SkipLabs, the goal remains the same: giving users fast, consistent access to data while maintaining system scalability and developer sanity. The reactive approach gives us a new tool for tackling this enduring challenge in computer science.\\n\\n## What\'s Next?\\nI\'d love to hear what aspects of cache invalidation and reactive systems you\'d like me to dive deeper into. Are you interested in:\\n\\n- Detailed performance results for a reactive approach?\\n- Deep technical implementation details of how SkipLabs tracks dependencies?\\n- Real-world case studies of teams migrating from traditional caching to reactive systems?\\n- Practical migration strategies for existing codebases?\\n- Other distributed systems challenges that reactive architectures could solve?\\n\\nDrop me a line and let me know what you\'d find most valuable, your feedback helps shape what I write about next."},{"id":"backend_pressure","metadata":{"permalink":"/blog/backend_pressure","source":"@site/blog/backend_pressure.md","title":"Backend Pressure from a Reactive Point of View","description":"A technical exploration of how reactive systems can solve backend pressure through persistent computational structures, introducing Skip as a framework that automates the complexity of building such systems.","date":"2025-06-20T00:00:00.000Z","tags":[],"readingTime":6.35,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Backend Pressure from a Reactive Point of View","description":"A technical exploration of how reactive systems can solve backend pressure through persistent computational structures, introducing Skip as a framework that automates the complexity of building such systems.","slug":"backend_pressure","date":"2025-06-20T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Cache Invalidation and Reactive Systems","permalink":"/blog/cache_invalidation"},"nextItem":{"title":"Dynamically scaling your Skip services","permalink":"/blog/horizontal-scaling"}},"content":"Backend systems face constant pressure from multiple directions: user requests demanding instant responses, databases struggling under query loads, and servers managing finite computational resources. This backend pressure\u2014the cumulative stress of handling concurrent requests while maintaining performance and resource constraints\u2014manifests in bottlenecks, latency spikes, and system instability. Traditional approaches often treat these pressures as isolated problems\u2014adding a cache here, optimizing a query there\u2014resulting in complex patches that fix symptoms but ignore deeper architectural issues.\\n\\nThe conventional solution? Event-driven architectures and streaming systems. But here\'s the problem: these approaches force developers to manually create and manage streams, handle async complexity, deal with event schemas, and debug distributed streaming pipelines. You end up spending more time on streaming infrastructure than on your actual business logic.\\n\\n![Traditional vs Reactive backend](./assets/backend_pressure_illustration.png)\\n\\nThink of a financial portfolio app: instead of calculating portfolio performance each time a user loads their dashboard, the server maintains continuous streams where position changes flow through pricing calculations, which flow through performance metrics, which flow through sector aggregations. Or an e-commerce site where product price changes automatically update product views, category aggregations, search indices, and recommendation scores in real-time. Rather than computing results on demand, reactive systems keep computational pipelines running continuously, so the answers are always up-to-date and ready for immediate use\u2014reducing latency and spreading load over time instead of spiking under demand.\\n\\n{/* truncate */}\\n\\n## Precomputed Reactive Structures\\n\\nA reactive approach maintains continuous streams: position changes flow through pricing calculations, which flow through performance metrics, which flow through sector aggregations. The portfolio view stays current automatically, and user requests return instantly regardless of portfolio complexity.\\n\\nAnd here\'s the key insight that changes everything: we should be able to treat complex computations as persistent data structures rather than transient operations. These structures exist in memory, stay synchronized with source data, and serve requests without additional computation. This is the fundamental principle behind Skip\'s approach, which we\'ll explore in detail later.\\n\\n## Cache Invalidation as Dependency Management\\n\\nTraditional caching introduces the notorious cache invalidation problem: when source data changes, systems must remember to invalidate all dependent cached values. This leads to either stale data or overly aggressive invalidation that negates caching benefits.\\n\\nReactive systems eliminate manual cache invalidation by treating cached values as materialized views with explicit dependencies. When source data changes, the system automatically pushes updates through the dependency graph to wherever they are needed\u2014whether that\'s materialized views, API endpoints, or system edges. Cache invalidation becomes dependency propagation.\\n\\nFor example, when a product price changes in an e-commerce system, the reactive pipeline automatically updates product views, category aggregations, search indices, and recommendation scores. Hand-written reactive systems typically handle simple event propagation but require a lot of extra code written by developers in the backend to manage complex stateful views and aggregations. Skip enables this ideal: the developer declares dependencies once; the system maintains consistency thereafter through automatic dependency management of complex computational states.\\n\\nHow can Skip enable this ideal? Three words for you: granular incremental updates.\\n\\n## Granular Incremental Updates\\n\\nSkip reactive backends can perform granular, incremental updates rather than full recalculation when source data changes. If one product among thousands changes price, only the affected portions of aggregated views require updates. Category totals recalculate only for the affected category. Search indices update only relevant entries.\\n\\nThis granularity reduces computational overhead and memory churn. Systems can maintain complex materialized views that would be prohibitively expensive to recalculate entirely on each change.\\n\\nGranular updates also improve system responsiveness. Instead of blocking while recalculating entire datasets, systems can process changes incrementally and continue serving requests throughout the update process.\\n\\nI know what you\'re thinking: \\"This sounds great, but what\'s the catch?\\" Well, like most things in engineering, there are trade-offs to consider.\\n\\n## Memory-Computation Trade-offs\\n\\nWe make a trade-off: memory for computation time and request latency. Maintaining precomputed structures requires more memory than computing results on demand. However, memory costs have decreased significantly relative to computation costs and user experience requirements.\\n\\nThe trade-off becomes particularly favorable for read-heavy workloads where the same complex computations serve multiple requests. Computing once and serving many times provides better resource utilization than recomputing identical results repeatedly.\\nSo we\'ve covered the theory and the benefits, but what about the practical side? Well, implementing this isn\'t without its challenges.\\n\\n## Implementation Considerations\\n\\nImplementing reactive backends requires careful consideration of data flow patterns and dependency graphs. Systems must handle backpressure when computation cannot keep pace with data changes. They must also manage memory usage as materialized views grow with data volume.\\n\\nMonitoring remains important for reactive systems, though the metrics of interest shift from traditional patterns. Traditional metrics like request latency remain relevant, but reactive systems require additional visibility into stream processing rates, backpressure events, and materialized view sizes to understand system health.\\n\\n## Skip\'s Approach to Reactive Systems\\n\\nWhat if there was a completely different way to tackle this complexity? What if we could get all the benefits of reactive systems without having to build or manage the streams ourselves? This is where Skip comes from.\\n\\nSkip is a reactive framework that automatically creates and manages streams for you based on declarative computations. You write code as if time is frozen\u2014defining what your outputs should look like based on your inputs at a single point in time\u2014and Skip automatically turns this into live reactive streams that update clients in real-time. No manual stream wiring, no event handling complexity, no dependency tracking. Just declarative logic that automatically becomes reactive infrastructure.\\n\\nThink of it this way: instead of programming reactive streams directly, you write functions that describe relationships between data. Skip automatically generates the optimal reactive streams to keep everything synchronized and delivers updates to clients seamlessly.\\n\\nThis approach fundamentally changes how we think about backend pressure because you\'re no longer computing results on demand or managing complex event flows. Skip handles the reactive infrastructure while you focus on the business logic relationships between your data.\\n\\n## Wrap up\\n\\nReactive programming addresses backend pressure by shifting computation from request time to background processing. This approach enables instant response times, automatic cache consistency, and granular updates that scale with system complexity.\\nThe fundamental insight is treating complex computations as persistent, automatically maintained data structures rather than transient operations. This perspective changes how systems handle scaling, caching, and data consistency, often simplifying architecture while improving performance.\\n\\nIf you\'re dealing with read-heavy workloads where the same complex computations serve multiple requests, reactive approaches offer a compelling alternative to traditional request-response patterns. Start by identifying your most computationally expensive read operations\u2014those are prime candidates for reactive transformation. Look for scenarios where you\'re repeatedly calculating the same results, dealing with complex cache invalidation logic, or struggling with response times under load.\\nThe challenge has always been the complexity of building and managing these reactive systems manually. Skip changes this by automatically handling the stream creation, dependency tracking, and incremental updates that make reactive backends practical. Instead of spending weeks building reactive infrastructure, you can focus on declaring the relationships between your data and let Skip generate the optimal streaming architecture.\\n\\nThe reactive paradigm isn\'t a silver bullet, but for systems facing mounting backend pressure from concurrent requests and complex computations, Skip provides a viable path toward managing computational load without sacrificing response times or data consistency. As your system complexity grows, the benefits of automatic dependency management and incremental updates become increasingly valuable.\\nIn our next post, we\'ll dive deep into load testing Skip-powered systems and share concrete performance data that demonstrates these benefits in practice. We\'ll explore how Skip\'s reactive architecture behaves under various load patterns and what metrics matter most when evaluating performance."},{"id":"horizontal-scaling","metadata":{"permalink":"/blog/horizontal-scaling","source":"@site/blog/scaling.md","title":"Dynamically scaling your Skip services","description":"How to horizontally scale Skip services with Kubernetes","date":"2025-06-06T00:00:00.000Z","tags":[],"readingTime":3.94,"hasTruncateMarker":true,"authors":[{"name":"Benno Stein","title":"Senior Engineer","url":"https://bennostein.org","key":"benno","page":null}],"frontMatter":{"title":"Dynamically scaling your Skip services","description":"How to horizontally scale Skip services with Kubernetes","slug":"horizontal-scaling","date":"2025-06-06T00:00:00.000Z","authors":"benno","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Backend Pressure from a Reactive Point of View","permalink":"/blog/backend_pressure"},"nextItem":{"title":"React + Vite in front of a Skip Service - the template","permalink":"/blog/skip_with_react_vite"}},"content":"Skip makes it fast and easy to build reactive services which efficiently update\\ntheir outputs in response to input changes, powering real-time features and\\nsaving resources by avoiding unnecessary recomputations.\\n\\nThe technical foundation that makes this possible is Skip\'s hyper-efficient\\nreactive computation graph, which is written in the Skip programming language,\\nruns natively, and takes great pains to efficiently represent and manipulate\\nthe data underlying your reactive system.\\n\\nHowever, that still requires memory, compute, and other resources -- so what do\\nyou do when traffic spikes or grows beyond the capacity of even a powerful\\nsingle machine? Scale out and distribute your reactive service across more\\nmachines, of course!\\n\\n\x3c!--truncate--\x3e\\n\\nWe\'ve recently built out some capabilities to make this easy, using a\\ndistributed leader/follower architecture to dramatically increase the number of\\nconcurrent resource instances that a Skip service can support.\\n\\n## Leader/Follower architecture\\n\\nA single Skip service consists of:\\n\\n    * a **shared computation graph** representing the portion of that service\'s\\n\\tcomputations that is common among all of its clients: some data structures,\\n\\taggregations, partially-computed results, or the like that are always\\n\\tmaintained up-to-date regardless of client requests, and\\n\\n    * one or more **resources** which can be instantiated by clients, dynamically\\n\\textending the computation graph as needed to produce data streams customized\\n\\tby user-specific context or request parameters.\\n\\nIn practice, the work of maintaining the shared computation graph should not\\nmassively increase under spiking load, but the work of maintaining resource\\ninstances and serving their data streams _will_ increase in proportion to the\\nnumber of concurrent clients.\\n\\nThis dynamic affords an opportunity for **horizontal scaling**: we can maintain the\\nshared computation graph just once on a\\n[_leader_](https://skiplabs.io/docs/api/helpers/functions/asLeader) and mirror\\nit to each of any number of\\n[_followers_](https://skiplabs.io/docs/api/helpers/functions/asFollower),\\namong which resource instances are evenly distributed, as illustrated in the\\nfollowing diagram:\\n\\n![Leader-follower architecture](./assets/leader_follower_arch.png)\\n\\nThis diagram shows the structure of a distributed Skip service and the data flow\\nfor a single client request. When client A requests a live data stream, a\\nreverse proxy forwards that to an available follower, selecting follower 2 in\\nthis example. That follower then sets up a reactive compute graph to maintain\\nthe requested data, incorporating user context and query parameters from client\\nA as well as any shared inputs from the leader.\\n\\nThis design allows to instantiate many more resources for many more clients than\\na single Skip service could handle alone, while maintaining the clean/simple\\nsemantics and low latency of a single-service deployment.\\n\\nTo see this in action, you can pull our example, run it locally, and navigate to\\n`localhost` in your browser:\\n\\n```bash\\nnpx create-skip-service hackernews --example hackernews --verbose\\ndocker compose -f hackernews/compose.distributed.yml up --build\\n```\\n\\nTo see more options or run the application in alternative configurations,\\nconsult the `README.md`\\n[online](https://github.com/SkipLabs/skip/tree/main/examples/hackernews/README.md)\\nor in the `hackernews` directory created by `create-skip-service`.\\n\\n## Kubernetes\\n\\nRunning a distributed reactive service is a great way to handle larger amounts\\nof traffic and/or more complex reactive computations, but what\'s really\\nimportant is to be able to easily scale your reactive system up and down when\\nyour product goes viral, traffic spikes, and your pager goes off in the middle\\nof the night.\\n\\nWe\'ve recently built out some Kubernetes\\n[configuration](https://github.com/SkipLabs/skip/tree/main/examples/hackernews/kubernetes/distributed_skip)\\nto make this as easy as running `kubectl scale --replicas=$X ...` (or the\\nGUI/dashboard equivalent if you prefer or are running on a hosted platform)\\nwithout breaking any clients or requiring any changes in your reactive service\\nor other backend components.\\n\\n:::note\\n\\nTry it yourself! Run the hackernews example linked above using its Kubernetes\\nconfiguration, then try running `kubectl scale --replicas=$REPLICAS statefulset\\nrhn-skip` with varying number of `REPLICAS` (at least 2, for one leader and one\\nfollower) and see your Skip service scale up and down without downtime.\\n\\n:::\\n\\n\\nThe core idea is simple: your reactive Skip service is a Kubernetes\\n[StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/),\\ngiving each pod a stable and unique network identity.  When a new pod is added\\n(either at startup or when scaling up), it registers itself with the cluster\'s\\ningress load balancer.\\n\\nWhen a resource is instantiated, the resulting data stream\'s identifier encodes\\nthe follower hosting the stream, allowing the load balancer to route external\\ntraffic to the proper Skip instance.  When traffic subsides and the deployment\\nscales down, the pod is taken out of rotation by the load balancer, until a\\nsubsequent scale-up brings it back into use.\\n\\n## Wrap-up\\n\\nEveryone\'s infrastructure and application are different, so let us know if there\\nare other frameworks or tools you\'d like to see supported or used in our\\nexamples and demos!\\n\\nWe\'re also happy to help you scale out your reactive service using Skip, either\\nby adapting these tools to your environment or advising on your setup.  Reach\\nout and show us what you\'re building, or come join the\\n[Discord](https://discord.gg/rby6YUqGxQ)!"},{"id":"skip_with_react_vite","metadata":{"permalink":"/blog/skip_with_react_vite","source":"@site/blog/chat_with_react_vite.md","title":"React + Vite in front of a Skip Service - the template","description":"Build a modern chat app with real-time updates using Skip\'s reactive data system, React, and Vite","date":"2025-05-30T00:00:00.000Z","tags":[],"readingTime":1.88,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"React + Vite in front of a Skip Service - the template","description":"Build a modern chat app with real-time updates using Skip\'s reactive data system, React, and Vite","slug":"skip_with_react_vite","date":"2025-05-30T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Dynamically scaling your Skip services","permalink":"/blog/horizontal-scaling"},"nextItem":{"title":"A CLI to streamline the creation of Skip services","permalink":"/blog/announcing_create_skip_service_cli"}},"content":"Hello skippers. Today, we are introducing a new template to our collection: React + Vite. While our previous blog posts focused on building skip services, this new template represents our first step into the frontend, bringing together the best of both worlds: front and back.\\n\\n```bash\\nnpx create-skip-service my-skip-chat --template with_react_vite\\n```\\n\\n{/* truncate */}\\n\\n## What\'s Inside the Template?\\n\\nOur React + Vite template for Skip Services comes with everything you need to get started on building a modern web application: an easy to manipulate end-to-end data flow from the user interface to the backend, and vice-versa (reactive programming enthusiasts, I have your attention now).\\n\\n## Getting Started\\n\\nTo create a new project with our React + Vite template, simply run:\\n\\n```bash\\nnpx create-skip-service my-skip-chat --template with_react_vite --verbose\\n\\ncd my-skip-chat   # enter the project directory\\n./setup.sh        # and set up the project\\n```\\n\\nSetting up the project will end up with:\\n```bash\\n\u2705 Setup complete!\\n\\nTo run the application:\\n1. Start the reactive service:\\n   cd reactive_service && pnpm start\\n\\n2. In a new terminal, start the frontend:\\n   cd frontend && pnpm dev\\n\\nThe frontend will be available at http://localhost:5173\\n```\\n\\nThis could hardly ever be simpler :-p\\n\\n## If you open the project directory\\n\\nIn both subprojects, `frontend` and `reactive_service`, we\'ve hardcoded some values, and taken shortcuts here and there in order to be straight to the point: making reactive programming easy to get, easy to grasp, easy to adopt, easy to embrace. easy to marry... ok, one step too far. \\n\\nOne or two cool things you will want to try:\\n - plugging into a DB from the backend, we can give you some help : [Building a Real-time Blog with Skip and PostgreSQL](https://skiplabs.io/blog/postgresql_and_skip)\\n - having several conversations on screen, one per tab\\n - integrating your user-management system\\n - integrating an AI agent to discuss into the chat\\n\\nWe have a [Discord server](https://discord.com/channels/1093901946441703434/1093901946441703437), why don\'t you swing by and say hi, ask a question or two?\\n\\n\\n## What\'s Next?\\n\\nFor the next Skip article, what should I tackle first? You tell me!\\n- Scaling your Skip service horizontally?\\n- Having an AI agent interacting in the chat ?\\n- Managing authorization and privacy per user?\\n- What else would be most useful to you now?"},{"id":"announcing_create_skip_service_cli","metadata":{"permalink":"/blog/announcing_create_skip_service_cli","source":"@site/blog/create_skip_service_announcement.md","title":"A CLI to streamline the creation of Skip services","description":"A CLI designed to streamline the creation and initialization of Skip services","date":"2025-05-23T00:00:00.000Z","tags":[],"readingTime":2.845,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"A CLI to streamline the creation of Skip services","description":"A CLI designed to streamline the creation and initialization of Skip services","slug":"announcing_create_skip_service_cli","date":"2025-05-23T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"React + Vite in front of a Skip Service - the template","permalink":"/blog/skip_with_react_vite"},"nextItem":{"title":"Building a Real-time Blog with Skip and PostgreSQL","permalink":"/blog/postgresql_and_skip"}},"content":"Hello Skippers. Today, we are excited to announce the release of `create-skip-service`: A CLI Tool for Skip Service Development. It aims to simplify the development workflow by providing a convenient way to bootstrap new Skip services.\\n\\n```bash\\nnpx create-skip-service <project-name> <options>\\n```\\n\\n{/* truncate */}\\n\\n## What are we talking about?\\n\\n`create-skip-service` is a CLI tool that helps developers quickly set up new Skip service projects with customizable templates, saving the time you\'d need to write boilerplate code. It\'s designed to follow best practices and provide a consistent starting point for all Skip service development.\\n\\n## Key Features\\n\\n- **Quick Project Setup**: A one-liner to have a fully working service\\n- **Template System**: Pick the right template for you, ask us for templates you need\\n- **Git Integration**: Automatic Git repository initialization (optional)\\n- **Customizable**: Once installed, templates are meant to be enhanced for YOUR project\\n- **Verbose Logging**: Detailed output for debugging and understanding the setup process, so you know what\'s going on\\n\\n## Getting Started\\n\\n[KISS](https://en.wikipedia.org/wiki/KISS_principle) - here is the one-liner to get started:\\n\\n```bash\\nnpx create-skip-service my-service\\n```\\n\\n### Basic Usage\\n\\nOf course, we\'ve kept in mind that not all projects are alike, so here are a few options to get what\'s right for you:\\n\\n```bash\\n# Create a new service with default template\\nnpx create-skip-service my-service\\n\\n# Create a service with a postgres integration\\nnpx create-skip-service my-service --template with_postgres\\n\\n# Create a service without Git initialization\\nnpx create-skip-service my-service --nogit\\n\\n# Run with verbose logging\\nnpx create-skip-service my-service --verbose\\n```\\n\\n## Available Options\\n\\n- `--template, -t`: Specify the template to use (default: \\"default\\")\\n- `--nogit`: To NOT initialize a Git repository, otherwise git is initialized with a first commit\\n- `--verbose, -v`: Run with verbose logging\\n- `--quiet, -q`: Run with minimal logging\\n- `--force, -f`: Force overwrite if directory exists\\n\\n## Why create-skip-service?\\n\\nWe created this tool to address several common challenges in Skip service development:\\n\\n1. **Efficiency**: Reduce the time spent on project setup and configuration\\n2. **Standardization**: Provide a unified way to create and manage Skip services\\n3. **Flexibility**: Support different templates and configurations while maintaining consistency\\n\\n## Contributing\\n\\nWe welcome contributions to `create-skip-service`! Whether it\'s bug reports, feature requests, or code contributions, your input helps make this tool better for everyone.\\n\\n- GitHub Repository: [SkipLabs/create-skip-service](https://github.com/SkipLabs/create-skip-service)\\n- Issues: [GitHub Issues](https://github.com/SkipLabs/create-skip-service/issues)\\n\\n## What\'s Next?\\n\\nWe\'re actively working on improving `create-skip-service` with plans for:\\n\\n- Additional template options\\n- Enhanced configuration options\\n- More detailed documentation\\n- Community-driven template contributions\\n\\n## Try It Out!\\n\\nGive it a go! And keep us posted on what you are building. Feedback is bliss, right?\\n\\n```bash\\nnpx create-skip-service my-service\\n```\\n\\n## Wrapping Up\\n\\n`create-skip-service` represents our commitment to making Skip service development more efficient and enjoyable. By handling the boilerplate setup automagically[^1], we believe this tool will help developers focus on what matters most - building great services.\\n\\nAs of today, we are already on our way to improving and augmenting the number of options and templates. Come back and help us sort priorities!\\n\\n[^1]: not a typo ;-)\\n\\nWe have a [Discord server](https://discord.com/channels/1093901946441703434/1093901946441703437), why don\'t you swing by and say hi?\\n\\n## What\'s Next?\\n\\nFor the next Skip article, what should I tackle first? You tell me!\\n- Scaling your Skip service horizontally?\\n- Integrating with frontend frameworks like React?\\n- Managing authorization and privacy per user?\\n- What else would be most useful to you *now*?"},{"id":"postgresql_and_skip","metadata":{"permalink":"/blog/postgresql_and_skip","source":"@site/blog/postgresql_and_skip_poc.md","title":"Building a Real-time Blog with Skip and PostgreSQL","description":"How to use Skip\'s reactive data streaming with a PostgreSQL backend","date":"2025-05-16T00:00:00.000Z","tags":[],"readingTime":4.66,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Building a Real-time Blog with Skip and PostgreSQL","description":"How to use Skip\'s reactive data streaming with a PostgreSQL backend","slug":"postgresql_and_skip","date":"2025-05-16T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"A CLI to streamline the creation of Skip services","permalink":"/blog/announcing_create_skip_service_cli"},"nextItem":{"title":"Reactive Social Network Service with Skip","permalink":"/blog/reactive_social_network_service_poc"}},"content":"Hello Skippers. Today, we are going to plug a [PostgreSQL](https://www.postgresql.org/) service and our starting point is the following project on GitHub: [Skip Postgres Demo](https://github.com/SkipLabs/postgres_and_skip_poc). We will demonstrate how to use Skip\'s reactive data streaming with a PostgreSQL backend. This project implements a simple blog post system with real-time updates using Skip\'s streaming capabilities.\\n\\n![PostgreSQL and Skip Service](./assets/postgres_and_skip.png)\\n\\n{/* truncate */}\\n\\nBefore we get too far ahead, two things\u2026(1) what you need and (2) what you will learn: \\n\\n## What you need: \\n\\n- [Node.js](https://nodejs.org/en) (Latest LTS version recommended)\\n- [`pnpm`](https://pnpm.io/) package manager\\n- [Docker](https://www.docker.com/) (for PostgreSQL)\\n- (optional) a Json pretty printer in the terminal, I use [jq](https://jqlang.org/)\\n\\n## What you will learn:\\n\\n- Real-time post streaming using Skip\'s reactive data system\\n- PostgreSQL integration for data persistence\\n- RESTful API endpoints for post management\\n- Support for streaming data access\\n\\n## Okay..ready?\u2026.let\'s go!\\n\\nWe are starting from a REST server for the simplest blog post system and we are going to add real-time updates features to it.\\nLet\'s check out the project: \\n```bash\\ngit clone https://github.com/SkipLabs/postgres_and_skip_poc.git\\ncd postgres_and_skip_poc/\\ngit checkout $(git rev-list --max-parents=0 main)\\n```\\n\\nAnd yes, you are right we are not starting on top of the main branch, but don\'t worry we\'ll get there in no time.\\n\\n\\nRun the `init_and_start_server.sh` script, it will start a PostgreSQL database in a Docker container and fill it in with some data. It will then install and build the whole project with `pnpm` to finally start it! \\n\\n```bash\\n./init_and_start_server.sh\\n```\\n\\nThe last lines should look something like:\\n\\n```bash\\n\ud83d\ude80 Starting server...\\n\\n\\n> skip-postgres@1.0.0 start /your/path/skip-postgres\\n> node dist/index.js\\n\\nServer running at http://localhost:3000\\n\\n```\\n\\nIn a new terminal, we are going to check that the REST API is up:\\nFirst, let\'s display one of the articles: \\n\\n```bash\\ncurl localhost:3000/posts/7 | jq\\n```\\n\\nNote that here there\'s an easy shortcut - I use [`jq`](https://jqlang.org/), which will make life more convenient to read JSON output.\\n\\nAs you can see, the article is not published: \\n```json\\n  \\"published_at\\": null,\\n  \\"created_at\\": \\"<some_date>\\",\\n  \\"updated_at\\": \\"<some_date>\\"\\n```\\nWe are going to publish and unpublish it:\\n\\n```bash\\ncurl -X PATCH http://localhost:3000/posts/7/publish | jq\\ncurl -X PATCH http://localhost:3000/posts/7/unpublish | jq\\n```\\n\\nYou should see the modification as results of the calls. \\n\\nA working REST API. \\n\\nAnd now here comes the fun part, let\'s make it a reactive API\\n\\n## The Skip Service\\n\\nFirst of all, kill your running server.\\nWe are about to checkout the top of the main branch and install the necessary bits: \\n\\n```bash\\ngit checkout main\\npnpm add -D @skipruntime/core @skipruntime/helpers @skipruntime/server\\npnpm add @skip-adapter/postgres\\n```\\n\\nA Skip service has collections as inputs and mappers to transform them into resources as outputs. \\n\\nIn our case, in file [`skipservice.ts`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts) you will find: \\n\\n1. A type you want to be notified about: [`PostWithAuthor`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L16-L29) which contains information from two tables: Users and Posts (see [`schema.sql`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/db/schema.sql)).\\n\\n2. A mapper [`PostMapper`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L32-L65) which creates instances of this type from an `EagerCollection` (an `EagerCollection` is always kept up-to-date).\\n\\n3. A resource [`PostResource`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L73-L85) which implements a function from a [`PostsResourceInputs`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/skipservice.ts#L67-L69) to an `EagerCollection<number, PostWithAuthor>`\\n\\nAnd it is when we instantiate our service that we plug it to the PostgreSQL, when we define an instance of [`SkipService`](https://github.com/SkipLabs/reactive_social_network_service_poc/blob/main/src/skipservice.mts#L10-L19), we receive a context as input. This context provides a method `useExternalResource`. \\n\\nRemember that in Skip, Resources are the outputs of your service that clients can subscribe to, while Collections are the inputs that feed data into your service. When you create a graph using `createGraph`, you define how these Collections are transformed into Resources. Once you\'ve set up your graph and connected it to your external services (like PostgreSQL in our case), you just need a few lines of code in your server to expose these Resources to clients: \\n\\n```typescript\\napp.get(\\n \'/streams/posts/:uid\',\\n asyncHandler(async (req, res) => {\\n   const uid = Number(req.params.uid);\\n   const uuid = await serviceBroker.getStreamUUID(\'posts\', uid);\\n   res.redirect(301, `${SKIP_READ_URL}/v1/streams/${uuid}`);\\n })\\n);\\n\\n\\napp.get(\\n \'/streams/posts\',\\n asyncHandler(async (req, res) => {\\n   const uuid = await serviceBroker.getStreamUUID(\'posts\');\\n   res.redirect(301, `${SKIP_READ_URL}/v1/streams/${uuid}`);\\n })\\n);\\n```\\n\\nYou can find these lines in [`src/index.ts#L65-L80`](https://github.com/SkipLabs/postgres_and_skip_poc/blob/main/src/index.ts#L65-L80)\\n\\nWe are adding two endpoints:\\n- `/streams/posts/:uid` which is a stream of changes for a given post of id uid\\n- `/streams/posts` which is a stream of changes for the entire posts table\\n\\nLet\'s play with it, in three terminals: \\n\\n### Terminal 1: Start the Server\\n```bash\\n./init_and_start_server.sh\\n```\\n\\nServer and services are ready when you see: \\n```bash\\nSkip control service listening on port 8081\\nSkip streaming service listening on port 8080\\nServer running at http://localhost:3000\\n```\\n\\n### Terminal 2: Subscribe to Post Updates\\n```bash\\ncurl -LN http://localhost:3000/streams/posts/7 | \\\\\\n  while read -r line; do\\n    echo \\"$line\\" | grep \'^data:\' | sed \'s/^data: //\' | jq .\\n  done\\n```\\n> \ud83d\udca1 **Note**: The shell command above includes some formatting magic to make the output readable. It filters for data lines and pretty-prints the JSON using `jq`.\\n\\n### Terminal 3: Modify the Post\\n```bash\\ncurl -X PATCH http://localhost:3000/posts/7/publish | jq\\ncurl -X PATCH http://localhost:3000/posts/7/unpublish | jq\\n```\\n\\nWatch Terminal 2 while you run these commands in Terminal 3 - you\'ll see the real-time updates!\\n\\n## Wrap-up\\n\\nIn our [previous blog post](https://skiplabs.io/blog/reactive_social_network_service_poc), we have walked you through how to create a Skip service for a reactive social network, with code! Check it out here: [Reactive Social Network Service (Proof of Concept)](https://github.com/SkipLabs/reactive_social_network_service_poc). \\n\\nNow we have learned how to plug a PostgreSQL service using Skip! \\n\\n## What\'s Next?\\n\\nFor the next Skip article, what should I tackle first? You tell me!\\n- Scaling your Skip service horizontally?\\n- Integrating with frontend frameworks like React?\\n- Managing authorization and privacy per user?\\n- What else would be most useful to you NOW?"},{"id":"reactive_social_network_service_poc","metadata":{"permalink":"/blog/reactive_social_network_service_poc","source":"@site/blog/reactive_social_skip_service_poc.md","title":"Reactive Social Network Service with Skip","description":"Build step by step a skip service","date":"2025-04-30T00:00:00.000Z","tags":[],"readingTime":9.93,"hasTruncateMarker":true,"authors":[{"name":"Hugo Venturini","title":"Software Engineer","url":"https://www.linkedin.com/in/venturini/","key":"hubyrod","page":null}],"frontMatter":{"title":"Reactive Social Network Service with Skip","description":"Build step by step a skip service","slug":"reactive_social_network_service_poc","date":"2025-04-30T00:00:00.000Z","authors":"hubyrod","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Building a Real-time Blog with Skip and PostgreSQL","permalink":"/blog/postgresql_and_skip"},"nextItem":{"title":"Event-Hidden Architectures","permalink":"/blog/event-hidden-arch"}},"content":"Reactive programming often sounds complex\u2014but it doesn\'t have to be. What if you could actually see how data responds to change, in real time, right from your terminal?\\n\\nIn this tutorial, we walk through building a small proof-of-concept social network backend using [Skip](https://www.skiplabs.io/) and TypeScript. It tracks users, groups, and their friendships\u2014with automatic updates to \\"active friends\\" using Skip\u2019s reactive computation graph.\\n\\nYou\u2019ll learn how to:\\n\\n- Set up a reactive Skip service\\n- Define users and groups as live-updating resources\\n- Connect it all to a REST API using Express\\n- Observe real-time updates as the data evolves\\n\\n> \\"The simpler, the merrier\\" \u2014 this project keeps things minimal, focused, and easy to explore.\\n\\nFrom Alice adding a new friend to live data reactions, this guide makes reactive systems tangible.\\n\\n{/* truncate */}\\n\\n### The Simpler, the Better\\n\\nEver heard the saying, \\"The simpler, the better\\"? Well, that especially holds true when it comes to learning\u2014particularly in reactive programming. Think of it like what we expect from a social network: *reactivity* in response to change. Sure, a full-blown social network has more bells and whistles than a carnival, but here we\'re just tackling a small piece of it. This guide keeps things light and breezy, focusing on the essentials to show how to build a reactive system using **Skip**. It\'s a proof of concept.\\n\\nBy keeping things simple and working right in the terminal, we can easily follow how data flows and how changes propagate without getting lost in complexity.\\n\\nWe\'ll start by setting up a Node project with TypeScript. Then, we\'ll define our data types. Since this is a social network, we want to represent friends and determine if they\'re active in a given group. We\'ll define members with names and associated groups, and for each group, we\'ll track whether a given member is active. After that, we\'ll build the Skip service, and finally, we\'ll wrap things up with a web server that uses the reactive service. All this will be wrapped up in an example where Alice makes a new friend.\\n\\nYou can follow along with [the full code on GitHub](https://github.com/SkipLabs/reactive_social_network_service_poc), structured with a commit for each step:\\n\\n### Step 1: The TypeScript Project\\n\\nThe whole first step can be found [here on GitHub](https://github.com/SkipLabs/reactive_social_network_service_poc/commit/b424165666b45a9d17b969f2422941f748556c85).\\n\\nThis first project really is Basic TypeScript 101, but watch out for some details such as the configuration of `package.json` and `tsconfig.json`. These two files can be sneaky little configuration traps if you\'re not careful. They might seem straightforward, but trust me, they can trip you up when you least expect it. So, keep an eye out and make sure everything is set up just right.\\n\\nLet\'s create a directory for this proof-of-concept:\\n\\n```bash\\nmkdir reactive_social_network_service\\ncd reactive_social_network_service\\n```\\n\\nAnd now the TypeScript project:\\n\\n```bash\\nnpm init -y\\nnpm install --save-dev typescript @types/node\\nmkdir -p src\\nnpx tsc --init \\\\\\n    --target ES2022 \\\\\\n    --module nodenext \\\\\\n    --rootDir \\"./src\\" \\\\\\n    --outDir \\"./dist\\" \\\\\\n    --moduleResolution nodenext\\n```\\n\\nConfiguration of `package.json` to prepare the project for what\'s about to come:\\n\\n```bash\\nnpm pkg set type=\\"module\\"\\nnpm pkg set scripts.build=\\"tsc\\"\\nnpm pkg set scripts.start=\\"node dist/index.js\\"\\nnpm pkg set scripts.clean=\\"rm -rf dist node_modules\\"\\n```\\n\\nWe are now ready to enter the Skip world!\\n\\n### Step 2: The Skip Service\\n\\nThe whole second step can be found [here on GitHub](https://github.com/SkipLabs/reactive_social_network_service_poc/commit/a63289aaae2404e62d1d212d870be042ab47f3e5).\\n\\nWe are going to need SkipLabs packages:\\n\\n```bash\\nnpm add @skiplabs/skip\\n```\\n\\nSo you better understand where we are heading, here is what the source directory will eventually look like:\\n\\n```bash\\nsrc\\n    activefriends.mts\\n    data.mts\\n    index.ts\\n    skipservice.mts\\n    types.mts\\n```\\n\\nAnd we start with the necessary types. In a nutshell, Skip defines a resource as the output of a Skip service. A resource is updated and maintained reactively. A collection is the core data structure over which reactive computations operate. An `EagerCollection` is always kept up-to-date. `LazyCollection` exists as well for evaluation upon queries only, but we are not using them in this proof-of-concept.\\n\\nHere the code for `src/types.mts`:\\n\\n```typescript\\nimport {\\n    type EagerCollection,\\n} from \\"@skipruntime/core\\";\\n\\ntype UserID = number;\\ntype GroupID = number;\\ntype User = { name: string; active?: boolean; friends: UserID[] };\\ntype Group = { name: string; members: UserID[] };\\n\\ntype ServiceInputs = {\\n    users: EagerCollection<UserID, User>;\\n    groups: EagerCollection<GroupID, Group>;\\n};\\n\\ntype ResourceInputs = {\\n    users: EagerCollection<UserID, User>;\\n    activeMembers: EagerCollection<GroupID, UserID>;\\n};\\n\\nexport type {\\n    UserID,\\n    GroupID,\\n    User,\\n    Group,\\n    ServiceInputs,\\n    ResourceInputs,\\n};\\n```\\n\\nNow some data to get started. Outside this proof-of-concept, this would come from your database.\\n\\nFour users and two groups e.g. Carol is in both groups but inactive.\\n\\nHere is the code for `src/data.mts`:\\n\\n```typescript\\nimport { InitialData } from \\"@skipruntime/core\\";\\nimport { ServiceInputs } from \\"./types.mjs\\";\\n\\n// Initial data for the social network service\\nconst initialData: InitialData<ServiceInputs> = {\\n    users: [\\n        [0, [{ name: \\"Bob\\", active: true, friends: [1, 2] }]],\\n        [1, [{ name: \\"Alice\\", active: true, friends: [0, 2] }]],\\n        [2, [{ name: \\"Carol\\", active: false, friends: [0, 1] }]],\\n        [3, [{ name: \\"Eve\\", active: true, friends: [] }]],\\n    ],\\n    groups: [\\n        [1001, [{ name: \\"Group 1\\", members: [1, 2, 3] }]],\\n        [1002, [{ name: \\"Group 2\\", members: [0, 2] }]],\\n    ],\\n};\\n\\nexport { initialData };\\n```\\n\\nLet\'s talk about active friends! For that, we need to define a filter for that `active` boolean. We are going to use a mapper. In Skip, a mapper describes a computation from keys/values in one collection to keys/values in another collection. It forms the edges of the Skip reactive computation graph, specifying transformations and compositions of data to produce intermediate results and outputs.\\n\\nWe are defining two mappers and a resource: one mapper to retrieve active members out of a given group, one mapper to retrieve friends of a given user out of a given group, and a resource which will hold active friends for a given user.\\n\\nHere is the code for `src/activefriends.mts`:\\n\\n```typescript\\nimport {\\n    type EagerCollection,\\n    type Json,\\n    type Mapper,\\n    type Resource,\\n    type Values,\\n} from \\"@skipruntime/core\\";\\n\\nimport { GroupID, Group, UserID, User, ResourceInputs } from \\"./types.mjs\\";\\n\\n// Mapper functions for reactive data transformations\\nclass ActiveMembers implements Mapper<GroupID, Group, GroupID, UserID> {\\n    constructor(private users: EagerCollection<UserID, User>) { }\\n\\n    // Maps group members to active users only\\n    mapEntry(gid: GroupID, group: Values<Group>): Iterable<[GroupID, UserID]> {\\n        return group\\n            .getUnique()\\n            .members.flatMap((uid: UserID) =>\\n                this.users.getUnique(uid).active ? [[gid, uid]] : [],\\n            );\\n    }\\n}\\n\\n// Filters group members to only include friends of a specific user\\nclass FilterFriends implements Mapper<GroupID, UserID, GroupID, UserID> {\\n    constructor(private readonly user: User) { }\\n\\n    mapEntry(gid: GroupID, uids: Values<UserID>): Iterable<[GroupID, UserID]> {\\n        return uids\\n            .toArray()\\n            .flatMap((uid: UserID) => (this.user.friends.includes(uid) ? [[gid, uid]] : []));\\n    }\\n}\\n\\n// Resource that provides active friends for a given user\\nclass ActiveFriends implements Resource<ResourceInputs> {\\n    private readonly uid: UserID;\\n\\n    constructor(params: Json) {\\n        if (typeof params != \\"number\\")\\n            throw new Error(\\"Missing required number parameter \'uid\'\\");\\n        this.uid = params;\\n    }\\n\\n    // Creates a collection of active friends for the specified user\\n    instantiate(inputs: ResourceInputs): EagerCollection<GroupID, UserID> {\\n        const user = inputs.users.getUnique(this.uid);\\n        return inputs.activeMembers.map(FilterFriends, user);\\n    }\\n}\\n\\nexport { ActiveMembers, ActiveFriends };\\n```\\n\\nAnd now the Skip service itself. It encompasses a server and a broker.\\n\\nHere is the code for `src/skipservice.mts`:\\n\\n```typescript\\nimport { runService } from \\"@skipruntime/server\\";\\nimport { SkipServiceBroker } from \\"@skipruntime/helpers\\";\\n\\nimport { ResourceInputs, ServiceInputs } from \\"./types.mjs\\";\\nimport { initialData } from \\"./data.mjs\\";\\nimport { ActiveFriends, ActiveMembers } from \\"./activefriends.mjs\\";\\n\\n// Service configuration and reactive graph definition\\nconst service = {\\n    initialData,\\n    resources: { active_friends: ActiveFriends },\\n    // Creates the reactive data flow graph\\n    createGraph(input: ServiceInputs): ResourceInputs {\\n        const users = input.users;\\n        const activeMembers = input.groups.map(ActiveMembers, users);\\n        return { users, activeMembers };\\n    },\\n};\\n\\n// Start the reactive service with specified ports\\nconst server = await runService(service, {\\n    streaming_port: 8080,\\n    control_port: 8081,\\n});\\n\\n// Initialize the service broker for client communication\\nconst serviceBroker = new SkipServiceBroker({\\n    host: \\"localhost\\",\\n    control_port: 8081,\\n    streaming_port: 8080,\\n});\\n\\nexport { server, serviceBroker };\\n```\\n\\n### Step 3: The Server\\n\\nThe whole first step can be found [here on GitHub](https://github.com/SkipLabs/reactive_social_network_service_poc/commit/5fb3308540468243eeb10972d2ace887d5d3678b).\\n\\nTo use the Skip service, we are creating an [Express](https://expressjs.com/) server:\\n\\n```bash\\nnpm install express\\nnpm install --save-dev @types/express\\n```\\n\\nThis server will expose an API to monitor active friends, and modify users and groups.\\n\\nHere is the code for `src/index.ts`:\\n\\n```typescript\\nimport express, { Request, Response } from \\"express\\";\\nimport { server, serviceBroker } from \\"./skipservice.mjs\\";\\n\\n// Initialize Express app\\nconst app = express();\\napp.use(express.json());\\n\\n// Store a reference to the Express server\\nconst expressServer = app.listen(8082, () => {\\n    console.log(`Web server listening at port 8082`);\\n});\\n\\n// Utility function to handle errors\\nconst handleError = (res: Response, error: unknown) => {\\n    console.error(\\"Error: \\", error);\\n    res.status(500).json(error);\\n};\\n\\n// Route handlers\\nconst getActiveFriends = async (req: Request, res: Response) => {\\n    try {\\n        const uuid = await serviceBroker.getStreamUUID(\\"active_friends\\", Number(req.params.uid));\\n        res.redirect(301, `http://localhost:8080/v1/streams/${uuid}`);\\n    } catch (error) {\\n        handleError(res, error);\\n    }\\n};\\n\\nconst updateEntity = async (entity: string, idParam: string, req: Request, res: Response) => {\\n    try {\\n        const id = Number(req.params[idParam]);\\n        await serviceBroker.update(entity, [[id, [req.body]]]);\\n        res.status(200).json({});\\n    } catch (error) {\\n        handleError(res, error);\\n    }\\n};\\n\\n// Define routes\\napp.get(\\"/active_friends/:uid\\", getActiveFriends);\\napp.put(\\"/users/:uid\\", (req: Request, res: Response) => updateEntity(\\"users\\", \\"uid\\", req, res));\\napp.put(\\"/groups/:gid\\", (req: Request, res: Response) => updateEntity(\\"groups\\", \\"gid\\", req, res));\\n\\n// Graceful shutdown handler for:\\n// - SIGINT: Ctrl+C in terminal\\n// - SIGTERM: System termination requests (kill command, container orchestration, etc.)\\n[\\"SIGTERM\\", \\"SIGINT\\"].forEach((sig) => process.on(sig, async () => {\\n    await server.close();\\n    expressServer.close(() => {\\n        console.log(\\"\\\\nServers shut down.\\");\\n    });\\n}));\\n```\\n\\nLet\'s install, build and start it!\\n\\n```bash\\nnpm install\\nnpm run build\\nnpm run start\\n```\\n\\nStarting the server will display something like:\\n\\n```bash\\n> reactive_social_network_service@1.0.0 start\\n> node dist/index.js\\n\\nSkip control service listening on port 8081\\nSkip streaming service listening on port 8080\\nWeb server listening at port 8082\\n```\\n\\nThe Express server listens to the steaming service for updates, and it is now time see it in action!\\n\\n### Step 4: Let\'s See It Work\\n\\nWe are going to use three terminals: one is already running the server and the service, one will issue writes on port 8081, and one will watch changes on port 8082.\\n\\nWhile the service is running, in a fresh terminal, we are going to listen for changes on Alice\'s friends (index `1`):\\n\\n```bash\\ncurl -LN http://localhost:8082/active_friends/1 # Alice\'s active friends\\n```\\n\\nThe previous command will continue listening after displaying the following, hence you won\'t get any prompt back.\\n\\n```bash\\nevent: init\\nid: <SOME_HASH>\\ndata: [[1002,[0]]]\\n```\\n\\nLeave it like that and open the third and last terminal in which we are going to add and remove values to the initial data: the list of Alice friends is about to evolve:\\n\\n```bash\\ncurl http://localhost:8081/v1/inputs/users \\\\\\n    -X PATCH \\\\\\n    --json \'[[1, [\\n    {\\n        \\"name\\": \\"Alice\\",\\n        \\"active\\": true,\\n        \\"friends\\": [0, 2, 3]\\n        }\\n    ]]]\'\\n```\\n\\nWhat do you see in the second terminal? The data is being reactively updated. Go ahead and try other modifications e.g. Bob turns inactive, Alice removes Carol from her group of friends.\\n\\n### Wrapping Up\\n\\nReactive programming doesn\'t have to be intimidating. With Skip, we\'ve seen how simple it is to wire up reactivity\u2014from raw data all the way to live updates in an API. The idea is simple: when something changes, everything that depends on it updates automatically. And that\'s exactly what we built.\\n\\nOf course, this is just the beginning. You now have a foundation for reactive services, and from here, the possibilities are wide open. Want to plug it into a real-time dashboard? Hook it into a game? Build collaborative tools?\\n\\n### What\'s next?\\n\\nFor the next Skip article, what should I tackle first? You tell me!\\n\\n- Listening to live changes from a PostgreSQL database?\\n- Scaling your Skip service horizontally?\\n- Integrating with frontend frameworks like React?\\n- Managing authorization and privacy per user?\\n- What else would be useful to your projects?\\n\\nWe\'ve exposed reactive programming in the nude, \'scuse my french. The reactive world can be vast and complex but SKIP will be your guide and now you\'ve got a solid start."},{"id":"event-hidden-arch","metadata":{"permalink":"/blog/event-hidden-arch","source":"@site/blog/event_hidden_arch.md","title":"Event-Hidden Architectures","description":"Interactive features without events","date":"2025-04-21T00:00:00.000Z","tags":[],"readingTime":5.39,"hasTruncateMarker":true,"authors":[{"name":"Charles Zedlewski","title":"SkipLabs Advisor","url":"https://www.linkedin.com/in/charleszedlewski/","key":"charles","page":null}],"frontMatter":{"title":"Event-Hidden Architectures","description":"Interactive features without events","slug":"event-hidden-arch","date":"2025-04-21T00:00:00.000Z","authors":"charles","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Reactive Social Network Service with Skip","permalink":"/blog/reactive_social_network_service_poc"},"nextItem":{"title":"New built-in resources for Skip services","permalink":"/blog/non-reactive-dependencies"}},"content":"## Event-Hidden Architectures\\n\\n### How did we get here?\\n\\nOne of the most powerful and consistent trends in software for the past decade has been the move from single stack to cloud native applications.  Cloud native applications are inherently distributed and have become popular as developers are drawn to the convenience of containers and platform-as-a-service infrastructure.\\n\\nThe API-ification of important subsystems means today hardly anyone would consider implementing their own payments, shipping, SMS, chat, billing or shopping cart functionality.  Instead they\u2019ll lean on Stripe, Twilio, Shopify, Shippo, etc; accelerating time-to-value and further distributing the functions of the application.\\n\\nIn the last few years developers have moved quickly to incorporate more and diverse AI features into their applications, but AI models and application logic compute requirements are quite different from one another and therefore seldom run in the same stack, further distributing the application.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Example architecture diagram](./assets/event-hidden-arch-diagram.png)\\n\\nSome have called for a \u201cback to basics\u201d approach of a single stack or modular monolith, but given the list of external demands on modern application development, distributed is unlikely to go away.  Instead it\u2019s becoming a more common approach for application architectures, not less, especially for \u201csuccessful\u201d applications that need to modularize to support more customers, users and features.\\n\\n### 10 years of bad advice\\n\\nOne can sympathize with the desire for a \u201cback to basics\u201d approach to cloud-native applications.  There are many \u201cpros\u201d to writing cloud-native, distributed applications but living with them has been miserable for developers and operators alike.  \u201cCloud native\u201d is effectively synonymous with \u201cdistributed,\u201d and \u201cdistributed\u201d is another way to say a network is parked in the middle of the application.  This changes engineering and operations in many big and subtle ways.  The most common and questionable advice to tackle these challenges has been \u201cevent-driven.\u201d\\n\\n![Events everywhere buzz lightyear](./assets/event-hidden-arch-buzz.png)\\n\\nEvents are the biggest reason why engineering teams try to postpone distributed or microservice architectures for as long as possible.  \u201cCloud native\u201d and \u201cmicroservices\u201d have unwittingly become synonymous with \u201cevent-driven\u201d and sullied their reputations in the process.\\n\\nEvents remain a useful technical mechanism to transmit state and data among application resources but they are a miserable experience for developers and operators alike.  Events:\\n\\n- Put application state and data in dozens of queues that make the application prone to failures, race conditions and incorrect results\\n- Force developers to think and program asynchronously which is more complex and time consuming than synchronous code\\n- Require developers know more than just their portion of the code and application domain: they also need to understand how to work with queues, caches and event schemas\\n- Make applications difficult to troubleshoot as there is no one place to understand the state and data for an application\\n\\n![Revolution against API schemas](./assets/event-hidden-arch-revolution.png)\\n\\n###  ~~Event-driven~~ vs event-hidden\\n\\nThe event-driven approach *was* necessary in 2020 but it isn\u2019t any longer in 2025\\\\.  Today\u2019s modern abstractions ensure it\u2019s unnecessary to make a faustian bargain between the flexibility & scale of distributed and the existential dread inspired by event-driven architectures.\\n\\nThere are three innovations that together allow us to engineer applications as event-driven but where developers and operators are fully abstracted away from the events themselves.\\n\\n1. [React](https://react.dev/) paired with client state management frameworks like [Redux](https://redux.js.org/), [Xstate](https://xstate.js.org/) or [Zustand](https://zustand-demo.pmnd.rs/) create a simple, productive experience for frontend engineering.  Frontend engineers are able to implement simple, performant UI components that can support complex application behaviors while outsourcing state and DOM management to the framework.\\n\\n2. Durable execution systems like [Temporal](https://temporal.io/), [Restate](https://restate.dev/) and [DBOS](https://www.dbos.dev/) ensure distributed backend application writes are always correct within and across services and network boundaries because each function call is durable by default.  All of the convenient guarantees of an ACID transaction are injected into the everyday programming experience.\\n\\n3. Reactive frameworks for incremental computation like [Skip](https://github.com/SkipLabs/skip) make it simple to implement distributed application reads from multiple sources and latencies to disparate clients and views.  Developers can blend data from multiple REST and/or streaming sources but write their logic as simple map functions free from references to infrastructure or events.  Because the services are reactive, performance and correctness concerns like cache invalidations are outsourced to the framework.\\n\\nAll three technologies share many of the same design principles.  Each technology caters to a different area of the application (client changes, backend writes, backend reads) but they all:\\n\\n- Provide a declarative developer experiences free from references to infrastructure\\n- Are event-driven \u201cunder the covers\u201d but don\u2019t leak these details to users\\n- Work asynchronously, supporting high levels of concurrency but still make the developer experience feel effectively synchronous\\n- Manage and in some cases enforce immutability of functions and/or data\\n- Handle application state as a first class concern\\n- Allow for modularity and incremental adoption \\\\- they don\u2019t enforce \u201cone pure approach\u201d on an entire application\\n- Can run locally or globally\\n- Are open source\\n\\nCollectively, these frameworks provide a substantial upgrade to applications across developer experience, feature velocity, correctness, efficiency and operational reliability.  Software development returns to a simpler, low context model; developers do not need to learn the unique quirks of low level infrastructure or understand the overall application architecture just to build or enhance their part of the application.\\n\\n### New powers\\n\\nBurying events doesn\u2019t just simplify engineering, it grants engineers with new powers in the process.\\n\\n**Transparency**\\n\\nIronically, with event-hidden engineering, every behavior of the application is now more visible in an actionable way because events are held in lower layers of the stack that understand their semantics and context.\\n\\n**State Handling**\\n\\nEvents are not the only thing that get hidden.  By extension state handling, state changes and their implications for correctness are also buried in this new model.  The new developer experience is just implementing as if forever at \u201cinit time.\u201d  All the progressions to get from 1 init time state to a future init time state are handled by the platforms powering the event-hidden architecture.\\n\\n**Replayability**\\n\\nLastly, event-hidden architectures nearly always enable replayability.  Keeping events and state in a separate, well abstracted place makes it possible to give developers and operations teams a general way to time travel through the application\u2019s computation.\\n\\n### Conclusion\\n\\nIn 2025 it turns out you can go home again: you can build feature-rich, scaled, distributed applications without having to interact with events, queues and the industry of patterns, frameworks and consultants that came with them.\\n\\nEvent-hidden will become the default web app architecture for the next 10 years.\\n\\n![Next ten years](./assets/event-hidden-arch-next-ten-years.png)"},{"id":"non-reactive-dependencies","metadata":{"permalink":"/blog/non-reactive-dependencies","source":"@site/blog/adapters.md","title":"New built-in resources for Skip services","description":"How to make Postgres and Kafka-backed reactive services","date":"2025-04-14T00:00:00.000Z","tags":[],"readingTime":4.47,"hasTruncateMarker":true,"authors":[{"name":"Benno Stein","title":"Senior Engineer","url":"https://bennostein.org","key":"benno","page":null}],"frontMatter":{"title":"New built-in resources for Skip services","description":"How to make Postgres and Kafka-backed reactive services","slug":"non-reactive-dependencies","date":"2025-04-14T00:00:00.000Z","authors":"benno","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Event-Hidden Architectures","permalink":"/blog/event-hidden-arch"},"nextItem":{"title":"SkipLabs Funding","permalink":"/blog/skiplabs-funding"}},"content":"The Skip framework is a system for building and running incremental backend services, simplifying the challenges of engineering complex reactive systems.\\n\\nWhile Skip reactive services compose naturally with *each other*, they must also coexist with other backend systems with non-reactive semantics and APIs.\\n\\nThis blog post describes some recent enhancements we\'ve made to the Skip framework to make it easy to bridge the reactive/non-reactive interface for popular systems like PostgreSQL and Kafka, and shows how you can build similar integrations with other systems and APIs.\\n\\n\x3c!--truncate--\x3e\\n\\n## Postgres\\n\\nPostgreSQL is one of the most popular relational databases in use today, serving as a highly scalable and resilient source-of-truth for critical application data.\\n\\nFor incremental computation, it can be tricky to maintain an up-to-date view of an application\'s state over a relational data model.\\nDifferent data sources add and modify values in an interconnected relational data model: you can either re-query and re-build the world periodically, or build some ad-hoc logic to propagate deltas.\\n\\nUsing Skip\'s [Postgres adapter](https://skiplabs.io/docs/api/adapters/postgres/classes/PostgresExternalService), developers can define some computation over their Postgres state and use the Skip framework to watch for changes in the relevant tables and recompute only the minimal affected outputs.\\n\\nTo use the Postgres addapter, when defining your Skip service, specify one (or more) databases in the `externalServices` field:\\n\\n```typescript\\nconst service = {\\n  initialData: ...,\\n  resources: ...,\\n  createGraph: ...,\\n  externalServices: {\\n    postgres: new PostgresExternalService({ host, port, database, ... }),\\n    ...,\\n  },\\n}\\n```\\n\\nThen, anywhere in that service, you can pull in a database table as a Skip collection by specifying a table name and a column to use as the key of the collection.\\nFor example, given a PostgreSQL table `my_table` with schema\\n\\n```sql\\nCREATE TABLE my_table (id SERIAL PRIMARY KEY, value TEXT);\\n```\\n\\nwe can use the table as a collection `myTable` in a Skip reactive service as follows.\\n\\n```typescript\\nconst myTable: EagerCollection<number, { id: number, value: string }> =\\n  context.useExternalResource({\\n    service: \\"postgres\\",\\n    identifier: \\"my_table\\",\\n    params: { key: { col: \\"id\\", type: \\"SERIAL\\" } },\\n  });\\n```\\n\\nUnder the hood, Skip will maintain this collection up-to-date by watching the database for changes to `my_table`; the collection `myTable` will update incrementally the same as any other Skip collection and can be used in reactive computations combining multiple tables or any other Skip collection.\\n\\nAlthough the `key` column specified here is the primary key column `id` of the table, it need not be a primary key or even unique -- it can be convenient to use a foreign key or other column to group multiple rows per key in the resulting Skip collection.\\n\\nA more-involved example of a reactive service with computations over several Postgres tables is available [here](https://github.com/SkipLabs/skip/tree/main/examples/hackernews).\\n\\n## Kafka\\n\\nApache [Kafka](https://kafka.apache.org) is another backend component with widespread adoption for high-throughput messaging and event streaming, often used to power real-time features.\\n\\nIntegrating a Kafka cluster with a Skip service is a natural way to build reactive logic on top of streaming data.\\nAs such, we provide an ExternalService [adapter](https://skiplabs.io/docs/api/adapters/kafka/classes/KafkaExternalService) which handles the plumbing for you and abstracts Kafka message streams as Skip collections.\\n\\nFirst, specify connection information and configuration in the `externalServices` field of your service:\\n\\n```typescript\\nconst service = {\\n  initialData: ...,\\n  resources: ...,\\n  createGraph: ...,\\n  externalServices: {\\n    kafka: new KafkaExternalService({ clientId, brokers, ... }),\\n    ...,\\n  },\\n}\\n```\\n\\nthen, consume messages into a reactive collection with a `usExternalResource` call, e.g.\\n\\n```typescript\\nconst myKafkaTopic: EagerCollection<string, string> =\\n  context.useExternalResource({\\n    service: \\"kafka\\",\\n    identifier: \\"my-kafka-topic\\",\\n    params: {},\\n  });\\n```\\n\\nBy default, messages are interpreted as their string key and value, but a \\"`messageProcessor`\\" can be provided to parse message payloads into other types, manipulate key structure, or pull in \\"topic\\" identifiers or other message metadata.\\n\\n\\n## Other external APIs\\n\\nOf course, there are many other technologies and systems and you may need to integrate those with Skip.\\nThe simplest option for many non-reactive APIs is to periodically poll an HTTP endpoint; we provide a simple interface to specify a polled dependency on a non-reactive API:\\n\\n```typescript\\nconst service = {\\n  initialData: ...\\n  resources: ...\\n  createGraph: ...\\n  externalServices: {\\n    myExternalService: new PolledExternalService({\\n      my_resource: {\\n        // HTTP endpoint\\n        url: \\"https://api.example.com/my_resource\\",\\n        // Polling interval, in milliseconds\\n        interval: 5000,\\n        // data processing into `Entry<K, V>[]` key/values structure\\n        conv: (data: Json) => Array.from(data, (v, k) => [k, [v]])\\n      }\\n    }),\\n  },\\n};\\n```\\n\\nThis [`PolledExternalService`](https://skiplabs.io/docs/api/helpers/classes/PolledExternalService) specifies a single endpoint polled every 5 seconds, but in general can include any number of endpoints with different polling intervals and converter/parser functions.\\n\\nOf course, polling necessarily introduces some latency in the reactive service: data can become stale between polls.\\nOn the other hand, increasing the request frequency can place undue load on the target non-reactive API.\\nAs such, care should be taken when setting up a polled dependency to choose a reasonable interval, and where possible polling should be avoided in favor of genuinely reactive updates.\\n\\n\\n## What\'s next?\\n\\nThese three adapters ([`PostgresExternalService`](https://skiplabs.io/docs/api/adapters/postgres/classes/PostgresExternalService), [`KafkaExternalService`](https://skiplabs.io/docs/api/adapters/kafka/classes/KafkaExternalService), and [`PolledExternalService`](https://skiplabs.io/docs/api/helpers/classes/PolledExternalService)) are provided to make it easy to integrate with common backend systems, but all three are built using only public APIs and can easily be extended or tweaked in user code.\\n\\nIf your application would benefit from additional adapters for other components and technologies, you can implement an [`ExternalService`](https://skiplabs.io/docs/api/core/interfaces/ExternalService) to wrap non-reactive systems as inputs to your Skip service.\\n\\nWe welcome and support open-source contributions and feature requests and are always happy to answer questions or help out on Discord."},{"id":"skiplabs-funding","metadata":{"permalink":"/blog/skiplabs-funding","source":"@site/blog/skiplabs_funding.md","title":"SkipLabs Funding","description":"SkipLabs raises $8M in seed funding","date":"2025-03-25T00:00:00.000Z","tags":[],"readingTime":2.435,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"SkipLabs Funding","description":"SkipLabs raises $8M in seed funding","slug":"skiplabs-funding","date":"2025-03-25T00:00:00.000Z","authors":"jverlaguet","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"New built-in resources for Skip services","permalink":"/blog/non-reactive-dependencies"},"nextItem":{"title":"Why Skip?","permalink":"/blog/why-skip"}},"content":"**The News**\\n\\nWe\u2019re pleased to announce that SkipLabs has raised $8 million to bring incremental computing to applications everywhere.  We intend to use the entirety of this funding to enhance the open source Skip project and grow the developer community.\\n\\nThis financing also means we get to work with [Lenny Pruss](https://www.linkedin.com/in/lennypruss/) at Amplify Partners who have invested in some of today\u2019s most prominent developer platforms such as dbt Labs, Prisma and Temporal to name a few and [Alex Mackenzie](https://www.linkedin.com/in/alex-mackenzie-6aa80ab4/) at Tapestry VC.  Check out Amplify\u2019s [blog post](https://www.amplifypartners.com/blog-posts/how-skiplabs-is-building-react-for-the-backend) that shares their view on SkipLabs and the future of reactive systems and Tapestry\u2019s [blog post](https://www.tapestry.vc/perspectives/skiplabs-streaming-without-the-streams) on why they chose to invest.\\n\\nWe are also humbled to earn the support of individual investors like Adam Gross, Spencer Kimball, Yann LeCun, Tom Occhino, Olivier Pomel and Nicolas Vasilache.\\n\\n{/* truncate */}\\n\\n**2025 so far\u2026**\\n\\nWe launched Skip at the start of this year and are very happy with the reception we\u2019ve received so far.  In the first two months since its alpha release, the Skip project has received more than 1,000 stars on github, more than 1,000 unique installations while our Discord community grew by 400%.\\n\\nWhat has been most gratifying are the discussions working with users to apply Skip and incremental computing to making their backend applications fast, secure and easy to enhance.  Developers have used Skip to power real-time crypto trading applications, CRM content management systems and sports tournament management.\\n\\nWe look forward to hundreds more of these collaborations because the opportunity for incremental computing is everywhere, it just wasn\u2019t easy enough to do before Skip.  Thanks to Skip, incremental computing will become the simplest way of building services that:\\n\\n- Power real-time features\\n- Source data from more than one place with more than one latency\\n- Serve distinct views to diverse clients that are a combination of browser, mobile, agent and API\\n- Move security and privacy implementations from the client to the server\\n\\n**The Road Ahead**\\n\\nThe Skip Framework is new, but it\u2019s built on very mature technical foundations developed while we were at Meta.  We plan to incorporate feedback from the community for a few months more before we ship a beta release so we can be confident in our backward compatibility commitments.\\n\\nIn the meantime we have lots of exciting new features to ship.  In the past few weeks we\u2019ve already added prebuilt external resources for Postgres and Kafka, a more efficient natively compiled runtime and native OAuth support.\\n\\nIn the months ahead we plan to add:\\n\\n- Horizontal autoscaling\\n- A built-in debugger that builds on Skip\u2019s transactional heap to provide unprecedented visibility at runtime\\n- Support for additional backend programming languages\\n\\n\\n**Thank You**\\n\\nOur deepest gratitude to our users, investors, advisors and early employees who have believed in and supported SkipLabs\u2019 mission of incremental computing since the earliest days.  We\u2019ll keep shipping and proving you were right all along.  Back to work!"},{"id":"why-skip","metadata":{"permalink":"/blog/why-skip","source":"@site/blog/why_skip.md","title":"Why Skip?","description":"Why use the Skip framework?","date":"2025-02-11T12:00:01.000Z","tags":[],"readingTime":6.345,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Why Skip?","description":"Why use the Skip framework?","slug":"why-skip","date":"2025-02-11T12:00:01.000Z","authors":"jverlaguet"},"unlisted":false,"prevItem":{"title":"SkipLabs Funding","permalink":"/blog/skiplabs-funding"},"nextItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"**Skip After Meta**\\nimage: /img/skip.png\\n\\nFacebook allowed us to open source both Hack and Skiplang so we could share both with the larger engineering community.  I eventually decided to leave Facebook (now Meta) to build on the work of Hack and Skiplang and develop technologies that would address the same challenges we had at Facebook but for engineers generally.  To do this, SkipLabs needed to incorporate two new technologies to make the work we did at Facebook usable in a normal engineering context.\\n\\n{/* truncate */}\\n\\n1. A way to manage objects transactionally as their state changes\\n\\nThis is an essential and unique design choice in Skip\u2019s approach to incremental computation.  Without it, developers have to program against streams and assume a large and insidiously subtle amount of complexity.  Incremental computation will only become mainstream if the dev and ops time experience is simpler and easier than the more common request/response paradigm, not just faster & continuous.\\n\\nObject handling needed to go beyond simple caching.  We needed an in-memory system of objects and collections that could maintain an up-to-date view of the data as it changed which we call \\\\*\\\\*reactive collections\\\\*\\\\*.\\n\\nMost of the objects in a program can be managed with memoization: storing and reusing the results of expensive computations.  This can be fast, simple and efficient provided you know when to evict the memoized values.\\n\\nIn Skip, memoized objects are held in \u201cLazy Collections.\u201d They compute and cache results only when needed clients and will automatically evict data from the cache to save memory.\\n\\nOther objects serve as indices or dictionaries. These objects realistically cannot be memoized as every value in the dictionary needs to be up to date at all times.  Skip manages these objects as \u201cEager Collections,\u201d keeping them in memory at all times and recomputing whenever a source updates.\\n\\n![Skip runtime internals diagram](./assets/why_skip_runtime_diagram.png)\\n\\n2. An ability to program services that compute incrementally but in familiar languages.\\n\\nSkiplang was built from the ground up to support incremental computing and it\u2019s very well suited to that purpose.  Realistically engineering teams outside of Meta have already picked their languages and stacks and it would be unrealistic to expect everyone to change to meet Skip.\\n\\nWe realized we could bring the most essential characteristics of Skiplang to already widely used languages, starting with TypeScript.  Skip aims to allow developers to implement programs declaratively while the framework automatically manages the state and decides what parts of the graph of computation need to be re-run.  For this to work, programs need to be deterministic, effect free and assume they are interacting with objects in a transactional heap.\\n\\n![Skip runtime application stack](./assets/why_skip_stack_diagram.png)\\n\\nThe Skip Runtime integrates with popular TypeScript runtimes (e.g. Node, Bun) and using proxy objects gives TypeScript a reactive, transactional heap.  We then added a TypeScript API that gives developers a simple programming model of map functions applied to the objects Skip is now holding in its transactional heap.  In this way, developers get to stick with their preferred language while Skip can transparently manage both the state of the objects and directs when different parts of a program are recomputed.\\n\\nWe added higher level features to the API to more easily manipulate those collections (filter, slice, join, etc ...), and added support for sub-collections (collections created while computing the entry of a collection), among other things.  In the future we think there\u2019s an opportunity to add other (optional) higher level primitives to make building complex services even easier.\\n\\nToday the Skip Framework exclusively supports TypeScript.  We plan to add support for Python and Java in the near future and other languages in the medium term.\\n\\n**The Skip Framework**\\n\\nBy combining a programming model that enforced effect-free operations on immutable objects with a runtime that abstracted away state and data management details, Skip has grown from a language to a full framework that we\u2019ve recently released.\\n\\n**Why Skip is useful**\\n\\nSkip can power services that perform any combination of reads and writes but the main benefits are experienced with reads.  Skip gives read-based features & functions several advantages over the more typical request/response model.\\n\\nSkip programs will:\\n\\nContinuously react to changes in data and clients \\\\- by managing the state of objects and the impact of functions on those objects, Skip services can incrementally recompute and stream new values to clients without recomputing unchanged values unnecessarily.\\n\\nAutomatically manage their own state \\\\- a feature may need to fetch data from multiple sources, compute intermediate results in a specific order while hydrating & invalidating different caches.  In Skip all of this complexity is handled by the framework.  Developers just write functions against collections for a single point in time.\\n\\nLet you introspect their execution \\\\- reactive programs are historically challenging to inspect and debug.  Because the Skip runtime manages both the objects and their graph of computation, Skip programs are very easy to introspect.  We plan to add a debugger to the framework to capitalize on this part of the design.\\n\\nWork alongside traditional request / response programs \\\\- Unlike past approaches to state management and reactivity, we wanted to make sure Skip was not an \u201call or nothing\u201d engineering decision.  Vertically, Skip can run in one or several layers of an existing software stack. It can read and write data from preexisting REST services, streaming sources or some legacy backend.  Skip can also power a new service where it reads and writes from a traditional database.\\n\\nHorizontally, Skip can power some or all the features of an application\u2019s backend and coexists with other business logic written in other frameworks, languages, etc.  Within Skip\u2019s context it\'s very easy to extend what you\u2019ve implemented in a service through a feature called \u201cmirroring\u201d that lets a new service import and synchronize data from a pre-existing peer service.\\n\\n**Why it feels awesome to use Skip**\\n\\nSkip lets developers focus on the \\"what\\" instead of the \\"how.\\" By defining the desired outcome declaratively, Skip generates the necessary logic to keep data live and reactive. It handles complexities like cache invalidation and recomputation efficiently without adding any cognitive burden for the developer.\\n\\nWe took a graph-based approach to the Skip programming model. You define your computation as a series of operations on collections, creating a \\\\*\\\\*graph of reactive computations\\\\*\\\\*. Each node in the graph can be a lazy or eager collection, and the framework automatically manages dependencies, updates, and cache invalidation for you.\\n\\nHere\u2019s the magic: You write your program as if \\\\*\\\\*time is frozen\\\\*\\\\*, defining static outputs in terms of static inputs.  Skip then turns this into a live, streaming system. If an input changes, the framework efficiently propagates updates to the affected parts of the graph, ensuring everything stays consistent. It even supports transactional updates, so you can modify multiple inputs simultaneously without breaking consistency.\\n\\nThis approach not only makes building incremental features easier but also scales better as the system grows. By focusing on what you want to build and letting Skip handle the rest, developers can deliver live, interactive features without the typical headaches.\\n\\n**Why Skip matters**\\n\\nSkip isn\u2019t just about solving caching or problems of incremental computation, it\u2019s about rethinking how we build systems that deal with constantly changing data. By giving developers tools to handle immutability, caching, and reactivity seamlessly, Skip makes it easier to write reliable, efficient, fast and scalable applications.\\n\\nBy combining the lessons learned from Facebook\u2019s early challenges with the innovation of Skip, we\u2019ve charted a path toward solving some of the most complex problems in real-time and reactive systems. This is just the beginning, and we\u2019re excited to see where this journey takes us next."},{"id":"skips-origins","metadata":{"permalink":"/blog/skips-origins","source":"@site/blog/skips_origins.md","title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","date":"2025-02-11T12:00:00.000Z","tags":[],"readingTime":4.495,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","slug":"skips-origins","date":"2025-02-11T12:00:00.000Z","authors":"jverlaguet","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Why Skip?","permalink":"/blog/why-skip"},"nextItem":{"title":"Skip alpha","permalink":"/blog/skip-alpha"}},"content":"**Coping with success**\\n\\nI joined a much-smaller-than-today\u2019s Facebook in 2011 to work on what would eventually become the developer tools team. At the time I joined, the engineering team was in the hundreds and the tools we had for development were, well, not great. PHP was the backbone of almost everything, with millions of lines of code. JavaScript was secondary, and only a few critical services ran on other languages. The company was scaling rapidly, and our development practices weren\u2019t keeping up.\\n\\nAs the codebase grew, so did the difficulty of maintaining and improving it.  Facebook became much more feature rich and simple enhancements became complicated and error prone.  Often new features needed to operate conditionally on how other preexisting features were already operating.  Essentially with each new layer of features teams added, state management became a greater concern.\\n\\n{/* truncate */}\\n\\n**Power of type systems**\\n\\nFacebook\u2019s codebase relied heavily on dynamic constructs called \u201cgatekeepers\u201d that determined which features were live for which users under different conditions. But these gatekeepers could change which code paths were executed in ways that weren\u2019t always obvious during development.\\n\\nThe inability to recreate the state of a path made testing and refactoring a nightmare. Imagine this: you tweak a method, and three weeks later, you\u2019re woken up at 3 AM because your change broke something deep in the application. Over time developers stopped touching critical parts of the codebase. Instead of refactoring and improving existing code, they\u2019d build parallel versions\u2014hacks on top of hacks. The technical debt was piling up, and we needed a way to make changes safely and confidently.\\n\\nWe believed we could use types to make deeper static analysis and automatic refactoring possible in the PHP language and this would help engineers bring some order to the chaos.  The system was called Hack. Adoption wasn\u2019t immediate\u2014there was some resistance\u2014but over time, developers saw the value. We intentionally designed the type system to be more flexible than strictly \u201ccorrect.\u201d This decision allowed us to cover more of the codebase quickly, even if it meant making some trade-offs in precision. It worked. Hack became the default way to write PHP at Facebook, and it\u2019s still in use today.\\n\\n**Incrementality**\\n\\nAs Facebook applications grew denser and more layered, more teams were looking to add real-time features where users\u2019 actions immediately impact others, like clicking a \\"Like\\" button and instantly updating the count across everyone\u2019s apps.  Such features are essential because performance and interactivity grew user engagement. When an application feels fresh and interactive, it\u2019s much more appealing than static content. However, implementing this in a scalable way is not straightforward.\\n\\nA typical scenario: you fetch a Facebook post. Normally, the server retrieves data like the post\u2019s text, the number of likes, and the comments. It applies rules to filter and prioritize what\u2019s shown (e.g., highlighting the most relevant comments or enforcing privacy settings). This logic runs once and produces a static result\u2014the post you see on your screen.\\n\\n![Non-reactive request flow](./assets/skips_origins_nonreactive_flow.png)\\n\\nMaking this \\"live\\" means the post updates automatically. If someone likes it, the count changes instantly. If a comment gets edited or deleted, it reflects for everyone in real time. Achieving this requires \\"inverting the arrow.\\"  Traditionally, a user\u2019s actions\u2014like adding a comment\u2014 produces a write to the database. To make things reactive, engineers needed to turn these writes into continuous streams of updates. For example:\\n\\n1\\\\. **User likes a post** \u2192 Create a stream of updates for that post\u2019s like count.\\n2\\\\. **User adds a comment** \u2192 Create a stream for the comments section.\\n\\n![Reactive request flow](./assets/skips_origins_reactive_flow.png)\\n\\nTypically reactive frameworks compose these streams into live updates. While conceptually straightforward, this approach fell short because:\\n\\n**Excessive recomputations**: Each small change could require recalculating the entire post, which is expensive and inefficient.\\n\\n**Caching problems**: To compute incrementally but avoid excessive fetching and recomputation, you need caches. But managing caches as objects are mutated becomes a nightmare\u2014how do you ensure they\u2019re up-to-date without introducing inconsistencies?\\n\\nCaches can work well for \\"hot\\" data\u2014frequently accessed data with a short lifespan. But outside this narrow use case, caching comes with trade-offs:\\n\\n1\\\\. **Long TTL (Time-to-Live)**: Keeps data in the cache longer, but risks showing stale or inconsistent data.\\n2\\\\. **Manual Invalidation**: Requires custom logic to invalidate caches when data changes. This is extremely error-prone and hard to maintain.\\n\\nFor large-scale systems like Facebook, neither approach was sustainable. We needed a better solution.\\n\\nWe created Skiplang to better serve our needs for better state management and real-time features & services.  We believed we could use our experience developing type systems to flip the way we think about reactive systems. Instead of starting with database writes and building logic from there, Skiplang let you:\\n\\n1\\\\. **Define the Desired Output**: Begin with what you want to build (e.g. a Facebook post).\\n2\\\\. **Use Declarative Rules**: Specify what data is needed and how it\u2019s combined.\\n\\nSkiplang was originally designed to handle incremental computation and caching, but its capabilities quickly expanded to address the needs of reactive features and efficient data handling.  We built Skiplang on the premise that **cached objects were immutable** \\\\- unchangeable once created. If we could guarantee that immutability, it would be easier to use static analysis of Skiplang\u2019s typed language to track dependencies and know exactly when to invalidate the cache and where to recompute.  Traditional programming languages didn\u2019t give us the tools to enforce these guarantees."},{"id":"skip-alpha","metadata":{"permalink":"/blog/skip-alpha","source":"@site/blog/skip_alpha.md","title":"Skip alpha","description":"Announce the alpha release of Skip","date":"2024-12-24T00:00:00.000Z","tags":[],"readingTime":0.645,"hasTruncateMarker":true,"authors":[{"name":"SkipLabs Team","key":"skiplabsteam","page":null}],"frontMatter":{"title":"Skip alpha","description":"Announce the alpha release of Skip","slug":"skip-alpha","date":"2024-12-24T00:00:00.000Z","authors":"skiplabsteam","image":"/img/skip.png"},"unlisted":false,"prevItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"We\u2019re pleased to share the alpha release of the [Skip Framework](https://github.com/SkipLabs/skip), an open source (MIT license) system for building and running reactive backend services.\\n\\nSkip gives TypeScript developers a simple declarative way to implement and run read-mostly features and services that are performant, transparent and continuously updated.\\nThe framework handles all the complexities of state management, integrations and failure handling in the process.\\n\\n{/* truncate */}\\n\\nYou can install via:\\n\\n```\\nnpm i @skiplabs/skip\\n```\\n\\nThis is an alpha release \\\\- we are happy with its stability and functionality but are looking forward to feedback on the interfaces and developer experience.\\n\\nIf you have time to check it out over the holidays and have feedback or just questions, [come talk to us in discord](https://discord.gg/4dMEBA46mE).\\n\\nHappy holidays,\\n\\nThe SkipLabs team"}]}}')}}]);