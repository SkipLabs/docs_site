"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"why-skip","metadata":{"permalink":"/blog/why-skip","source":"@site/blog/why_skip.md","title":"Why Skip?","description":"Why use the Skip framework?","date":"2025-02-11T12:00:01.000Z","tags":[],"readingTime":6.335,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Why Skip?","description":"Why use the Skip framework?","slug":"why-skip","date":"2025-02-11T12:00:01.000Z","authors":"jverlaguet"},"unlisted":false,"nextItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"**Skip After Meta**\\n\\nFacebook allowed us to open source both Hack and Skiplang so we could share both with the larger engineering community.  I eventually decided to leave Facebook (now Meta) to build on the work of Hack and Skiplang and develop technologies that would address the same challenges we had at Facebook but for engineers generally.  To do this, SkipLabs needed to incorporate two new technologies to make the work we did at Facebook usable in a normal engineering context.\\n\\n{/* truncate */}\\n\\n1. A way to manage objects transactionally as their state changes\\n\\nThis is an essential and unique design choice in Skip\u2019s approach to incremental computation.  Without it, developers have to program against streams and assume a large and insidiously subtle amount of complexity.  Incremental computation will only become mainstream if the dev and ops time experience is simpler and easier than the more common request/response paradigm, not just faster & continuous.\\n\\nObject handling needed to go beyond simple caching.  We needed an in-memory system of objects and collections that could maintain an up-to-date view of the data as it changed which we call \\\\*\\\\*reactive collections\\\\*\\\\*.\\n\\nMost of the objects in a program can be managed with memoization: storing and reusing the results of expensive computations.  This can be fast, simple and efficient provided you know when to evict the memoized values.\\n\\nIn Skip, memoized objects are held in \u201cLazy Collections.\u201d They compute and cache results only when needed clients and will automatically evict data from the cache to save memory.\\n\\nOther objects serve as indices or dictionaries. These objects realistically cannot be memoized as every value in the dictionary needs to be up to date at all times.  Skip manages these objects as \u201cEager Collections,\u201d keeping them in memory at all times and recomputing whenever a source updates.\\n\\n![Skip runtime internals diagram](./assets/why_skip_runtime_diagram.png)\\n\\n2. An ability to program services that compute incrementally but in familiar languages.\\n\\nSkiplang was built from the ground up to support incremental computing and it\u2019s very well suited to that purpose.  Realistically engineering teams outside of Meta have already picked their languages and stacks and it would be unrealistic to expect everyone to change to meet Skip.\\n\\nWe realized we could bring the most essential characteristics of Skiplang to already widely used languages, starting with TypeScript.  Skip aims to allow developers to implement programs declaratively while the framework automatically manages the state and decides what parts of the graph of computation need to be re-run.  For this to work, programs need to be deterministic, effect free and assume they are interacting with objects in a transactional heap.\\n\\n![Skip runtime application stack](./assets/why_skip_stack_diagram.png)\\n\\nThe Skip Runtime integrates with popular Typescript runtimes (e.g. Node, Bun) and using proxy objects gives Typescript a reactive, transactional heap.  We then added a Typescript API that gives developers a simple programming model of map functions applied to the objects Skip is now holding in its transactional heap.  In this way, developers get to stick with their preferred language while Skip can transparently manage both the state of the objects and directs when different parts of a program are recomputed.\\n\\nWe added higher level features to the API to more easily manipulate those collections (filter, slice, join, etc ...), and added support for sub-collections (collections created while computing the entry of a collection), among other things.  In the future we think there\u2019s an opportunity to add other (optional) higher level primitives to make building complex services even easier.\\n\\nToday the Skip Framework exclusively supports TypeScript.  We plan to add support for Python and Java in the near future and other languages in the medium term.\\n\\n**The Skip Framework**\\n\\nBy combining a programming model that enforced effect-free operations on immutable objects with a runtime that abstracted away state and data management details, Skip has grown from a language to a full framework that we\u2019ve recently released.\\n\\n**Why Skip is useful**\\n\\nSkip can power services that perform any combination of reads and writes but the main benefits are experienced with reads.  Skip gives read-based features & functions several advantages over the more typical request/response model.\\n\\nSkip programs will:\\n\\nContinuously react to changes in data and clients \\\\- by managing the state of objects and the impact of functions on those objects, Skip services can incrementally recompute and stream new values to clients without recomputing unchanged values unnecessarily.\\n\\nAutomatically manage their own state \\\\- a feature may need to fetch data from multiple sources, compute intermediate results in a specific order while hydrating & invalidating different caches.  In Skip all of this complexity is handled by the framework.  Developers just write functions against collections for a single point in time.\\n\\nLet you introspect their execution \\\\- reactive programs are historically challenging to inspect and debug.  Because the Skip runtime manages both the objects and their graph of computation, Skip programs are very easy to introspect.  We plan to add a debugger to the framework to capitalize on this part of the design.\\n\\nWork alongside traditional request / response programs \\\\- Unlike past approaches to state management and reactivity, we wanted to make sure Skip was not an \u201call or nothing\u201d engineering decision.  Vertically, Skip can run in one or several layers of an existing software stack. It can read and write data from preexisting REST services, streaming sources or some legacy backend.  Skip can also power a new service where it reads and writes from a traditional database.\\n\\nHorizontally, Skip can power some or all the features of an application\u2019s backend and coexists with other business logic written in other frameworks, languages, etc.  Within Skip\u2019s context it\'s very easy to extend what you\u2019ve implemented in a service through a feature called \u201cmirroring\u201d that lets a new service import and synchronize data from a pre-existing peer service.\\n\\n**Why it feels awesome to use Skip**\\n\\nSkip lets developers focus on the \\"what\\" instead of the \\"how.\\" By defining the desired outcome declaratively, Skip generates the necessary logic to keep data live and reactive. It handles complexities like cache invalidation and recomputation efficiently without adding any cognitive burden for the developer.\\n\\nWe took a graph-based approach to the Skip programming model. You define your computation as a series of operations on collections, creating a \\\\*\\\\*graph of reactive computations\\\\*\\\\*. Each node in the graph can be a lazy or eager collection, and the framework automatically manages dependencies, updates, and cache invalidation for you.\\n\\nHere\u2019s the magic: You write your program as if \\\\*\\\\*time is frozen\\\\*\\\\*, defining static outputs in terms of static inputs.  Skip then turns this into a live, streaming system. If an input changes, the framework efficiently propagates updates to the affected parts of the graph, ensuring everything stays consistent. It even supports transactional updates, so you can modify multiple inputs simultaneously without breaking consistency.\\n\\nThis approach not only makes building incremental features easier but also scales better as the system grows. By focusing on what you want to build and letting Skip handle the rest, developers can deliver live, interactive features without the typical headaches.\\n\\n**Why Skip matters**\\n\\nSkip isn\u2019t just about solving caching or problems of incremental computation, it\u2019s about rethinking how we build systems that deal with constantly changing data. By giving developers tools to handle immutability, caching, and reactivity seamlessly, Skip makes it easier to write reliable, efficient, fast and scalable applications.\\n\\nBy combining the lessons learned from Facebook\u2019s early challenges with the innovation of Skip, we\u2019ve charted a path toward solving some of the most complex problems in real-time and reactive systems. This is just the beginning, and we\u2019re excited to see where this journey takes us next."},{"id":"skips-origins","metadata":{"permalink":"/blog/skips-origins","source":"@site/blog/skips_origins.md","title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","date":"2025-02-11T12:00:00.000Z","tags":[],"readingTime":4.495,"hasTruncateMarker":true,"authors":[{"name":"Julien Verlaguet","title":"SkipLabs Founder & CEO","url":"https://x.com/JulienVerlaguet","key":"jverlaguet","page":null}],"frontMatter":{"title":"Skip\'s Origins","description":"Describe the origins of the Skip framework and programming language.","slug":"skips-origins","date":"2025-02-11T12:00:00.000Z","authors":"jverlaguet"},"unlisted":false,"prevItem":{"title":"Why Skip?","permalink":"/blog/why-skip"},"nextItem":{"title":"Skip alpha","permalink":"/blog/skip-alpha"}},"content":"**Coping with success**\\n\\nI joined a much-smaller-than-today\u2019s Facebook in 2011 to work on what would eventually become the developer tools team. At the time I joined, the engineering team was in the hundreds and the tools we had for development were, well, not great. PHP was the backbone of almost everything, with millions of lines of code. JavaScript was secondary, and only a few critical services ran on other languages. The company was scaling rapidly, and our development practices weren\u2019t keeping up.\\n\\nAs the codebase grew, so did the difficulty of maintaining and improving it.  Facebook became much more feature rich and simple enhancements became complicated and error prone.  Often new features needed to operate conditionally on how other preexisting features were already operating.  Essentially with each new layer of features teams added, state management became a greater concern.\\n\\n{/* truncate */}\\n\\n**Power of type systems**\\n\\nFacebook\u2019s codebase relied heavily on dynamic constructs called \u201cgatekeepers\u201d that determined which features were live for which users under different conditions. But these gatekeepers could change which code paths were executed in ways that weren\u2019t always obvious during development.\\n\\nThe inability to recreate the state of a path made testing and refactoring a nightmare. Imagine this: you tweak a method, and three weeks later, you\u2019re woken up at 3 AM because your change broke something deep in the application. Over time developers stopped touching critical parts of the codebase. Instead of refactoring and improving existing code, they\u2019d build parallel versions\u2014hacks on top of hacks. The technical debt was piling up, and we needed a way to make changes safely and confidently.\\n\\nWe believed we could use types to make deeper static analysis and automatic refactoring possible in the PHP language and this would help engineers bring some order to the chaos.  The system was called Hack. Adoption wasn\u2019t immediate\u2014there was some resistance\u2014but over time, developers saw the value. We intentionally designed the type system to be more flexible than strictly \u201ccorrect.\u201d This decision allowed us to cover more of the codebase quickly, even if it meant making some trade-offs in precision. It worked. Hack became the default way to write PHP at Facebook, and it\u2019s still in use today.\\n\\n**Incrementality**\\n\\nAs Facebook applications grew denser and more layered, more teams were looking to add real-time features where users\u2019 actions immediately impact others, like clicking a \\"Like\\" button and instantly updating the count across everyone\u2019s apps.  Such features are essential because performance and interactivity grew user engagement. When an application feels fresh and interactive, it\u2019s much more appealing than static content. However, implementing this in a scalable way is not straightforward.\\n\\nA typical scenario: you fetch a Facebook post. Normally, the server retrieves data like the post\u2019s text, the number of likes, and the comments. It applies rules to filter and prioritize what\u2019s shown (e.g., highlighting the most relevant comments or enforcing privacy settings). This logic runs once and produces a static result\u2014the post you see on your screen.\\n\\n![Non-reactive request flow](./assets/skips_origins_nonreactive_flow.png)\\n\\nMaking this \\"live\\" means the post updates automatically. If someone likes it, the count changes instantly. If a comment gets edited or deleted, it reflects for everyone in real time. Achieving this requires \\"inverting the arrow.\\"  Traditionally, a user\u2019s actions\u2014like adding a comment\u2014 produces a write to the database. To make things reactive, engineers needed to turn these writes into continuous streams of updates. For example:\\n\\n1\\\\. **User likes a post** \u2192 Create a stream of updates for that post\u2019s like count.\\n2\\\\. **User adds a comment** \u2192 Create a stream for the comments section.\\n\\n![Reactive request flow](./assets/skips_origins_reactive_flow.png)\\n\\nTypically reactive frameworks compose these streams into live updates. While conceptually straightforward, this approach fell short because:\\n\\n**Excessive recomputations**: Each small change could require recalculating the entire post, which is expensive and inefficient.\\n\\n**Caching problems**: To compute incrementally but avoid excessive fetching and recomputation, you need caches. But managing caches as objects are mutated becomes a nightmare\u2014how do you ensure they\u2019re up-to-date without introducing inconsistencies?\\n\\nCaches can work well for \\"hot\\" data\u2014frequently accessed data with a short lifespan. But outside this narrow use case, caching comes with trade-offs:\\n\\n1\\\\. **Long TTL (Time-to-Live)**: Keeps data in the cache longer, but risks showing stale or inconsistent data.\\n2\\\\. **Manual Invalidation**: Requires custom logic to invalidate caches when data changes. This is extremely error-prone and hard to maintain.\\n\\nFor large-scale systems like Facebook, neither approach was sustainable. We needed a better solution.\\n\\nWe created Skiplang to better serve our needs for better state management and real-time features & services.  We believed we could use our experience developing type systems to flip the way we think about reactive systems. Instead of starting with database writes and building logic from there, Skiplang let you:\\n\\n1\\\\. **Define the Desired Output**: Begin with what you want to build (e.g. a Facebook post).\\n2\\\\. **Use Declarative Rules**: Specify what data is needed and how it\u2019s combined.\\n\\nSkiplang was originally designed to handle incremental computation and caching, but its capabilities quickly expanded to address the needs of reactive features and efficient data handling.  We built Skiplang on the premise that **cached objects were immutable** \\\\- unchangeable once created. If we could guarantee that immutability, it would be easier to use static analysis of Skiplang\u2019s typed language to track dependencies and know exactly when to invalidate the cache and where to recompute.  Traditional programming languages didn\u2019t give us the tools to enforce these guarantees."},{"id":"skip-alpha","metadata":{"permalink":"/blog/skip-alpha","source":"@site/blog/skip_alpha.md","title":"Skip alpha","description":"Announce the alpha release of Skip","date":"2024-12-24T00:00:00.000Z","tags":[],"readingTime":0.645,"hasTruncateMarker":true,"authors":[{"name":"SkipLabs Team","key":"skiplabsteam","page":null}],"frontMatter":{"title":"Skip alpha","description":"Announce the alpha release of Skip","slug":"skip-alpha","date":"2024-12-24T00:00:00.000Z","authors":"skiplabsteam"},"unlisted":false,"prevItem":{"title":"Skip\'s Origins","permalink":"/blog/skips-origins"}},"content":"We\u2019re pleased to share the alpha release of the [Skip Framework](https://github.com/SkipLabs/skip), an open source (MIT license) system for building and running reactive backend services.\\n\\nSkip gives Typescript developers a simple declarative way to implement and run read-mostly features and services that are performant, transparent and continuously updated.\\nThe framework handles all the complexities of state management, integrations and failure handling in the process.\\n\\n{/* truncate */}\\n\\nYou can install via:\\n\\n```\\nnpm i @skiplabs/skip\\n```\\n\\nThis is an alpha release \\\\- we are happy with its stability and functionality but are looking forward to feedback on the interfaces and developer experience.\\n\\nIf you have time to check it out over the holidays and have feedback or just questions, [come talk to us in discord](https://discord.gg/4dMEBA46mE).\\n\\nHappy holidays,\\n\\nThe SkipLabs team"}]}}')}}]);